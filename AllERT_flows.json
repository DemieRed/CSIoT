[
    {
        "id": "337bbf4b93516ec5",
        "type": "tab",
        "label": "DSS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4cc631e446fbfee4",
        "type": "tab",
        "label": "ArcGIS Map",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6479d747245de353",
        "type": "tab",
        "label": "Sensors - NodeRED Map",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d723a14bdb72b742",
        "type": "mqtt-broker",
        "name": "TLS MQTT URL",
        "broker": "c5725620696d45f8af3960d5c6b87fa5.s2.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "hivemq.webclient.1724751346665",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b73dc5151c8cd587",
        "type": "ui-group",
        "name": "Resource Inventory",
        "page": "cfa291adbbd2dacd",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e9bb2b51ce473b0b",
        "type": "ui-group",
        "name": "Flooded areas by ArcGIS Online",
        "page": "cb055e99e51b4f53",
        "width": "20",
        "height": "20",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9873a56393824e9d",
        "type": "ui-group",
        "name": "General Sensor Data (Flood Depth Measurement)",
        "page": "9676da2458b98d6f",
        "width": "12",
        "height": "1",
        "order": 12,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3f9e45fa06a76d50",
        "type": "ui-group",
        "name": "Falani North [1:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "01bc00a54922f9da",
        "type": "ui-group",
        "name": "Falani Pinios [2:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "141130d1cb73e8da",
        "type": "ui-group",
        "name": "Falani East [3:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "74f525e7b173eb49",
        "type": "ui-group",
        "name": "Falani South [4:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4fea00fbe0a7300d",
        "type": "ui-group",
        "name": "Falani Center [5:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 6,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5592492949504a80",
        "type": "ui-group",
        "name": "Larissa KTEL [7:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 8,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "46d475fb89b4c934",
        "type": "ui-group",
        "name": "Larissa DEYAL [6:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 7,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "50faa3f91f305570",
        "type": "ui-group",
        "name": "Larissa Archaio Theatro [8:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 9,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "87749ecf637e0b7b",
        "type": "ui-group",
        "name": "Dasochori [9:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 10,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "479a4bb78b4b80f5",
        "type": "ui-group",
        "name": "Omorfochori [10:Point]",
        "page": "9676da2458b98d6f",
        "width": "6",
        "height": "1",
        "order": 11,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4a610f34d3005aa8",
        "type": "ui-group",
        "name": "NodeRED Map",
        "page": "9676da2458b98d6f",
        "width": "12",
        "height": "1",
        "order": 13,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "79f6d02b3ab51d7a",
        "type": "ui-group",
        "name": "Simulation Control",
        "page": "9676da2458b98d6f",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "78b23e52ee56139f",
        "type": "ui-group",
        "name": "Route before flood",
        "page": "cb055e99e51b4f53",
        "width": "20",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b018127baa0a7e76",
        "type": "ui-group",
        "name": "Route after flood",
        "page": "cb055e99e51b4f53",
        "width": "20",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "22f7beb3687cadc6",
        "type": "ui-group",
        "name": "Resource Allocations",
        "page": "cfa291adbbd2dacd",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e91f9beba28850d9",
        "type": "ui-group",
        "name": "Training Dataset Creation",
        "page": "3a0b5009394a2fdb",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "74689fbe24459bb0",
        "type": "ui-group",
        "name": "Random Forest Regression Model Training",
        "page": "3a0b5009394a2fdb",
        "width": "12",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5bebe7e6e21d99f6",
        "type": "ui-group",
        "name": "Random Forest Evaluation Metrics",
        "page": "3a0b5009394a2fdb",
        "width": "12",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "7891f14de76736f7",
        "type": "ui-group",
        "name": "Ngrok Setup",
        "page": "3a0b5009394a2fdb",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d8e9abb3aebafa5c",
        "type": "ui-group",
        "name": "Historical Data",
        "page": "3a0b5009394a2fdb",
        "width": "12",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c6aa179c1d765f60",
        "type": "ui-group",
        "name": "Historical Data",
        "page": "098d1fce540c81f6",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "cb055e99e51b4f53",
        "type": "ui-page",
        "name": "Navigation Updates",
        "ui": "0b0b3c3c94b9ba13",
        "path": "/navigation_updates",
        "icon": "mdi-navigation-variant-outline mdi-36px",
        "layout": "tabs",
        "theme": "0d9efec7063f80a9",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "cfa291adbbd2dacd",
        "type": "ui-page",
        "name": "DSS Dashboard",
        "ui": "0b0b3c3c94b9ba13",
        "path": "/dss_dashboard",
        "icon": "mdi-arrow-decision-outline mdi-36px",
        "layout": "tabs",
        "theme": "0d9efec7063f80a9",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9676da2458b98d6f",
        "type": "ui-page",
        "name": "Sensors' Measurements & Map",
        "ui": "0b0b3c3c94b9ba13",
        "path": "/sensors_measurements_and_map",
        "icon": "mdi-water-alert mdi-36px",
        "layout": "grid",
        "theme": "0d9efec7063f80a9",
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "3a0b5009394a2fdb",
        "type": "ui-page",
        "name": "DSS Preparatory",
        "ui": "0b0b3c3c94b9ba13",
        "path": "/dss_preparatory",
        "icon": "mdi-tools",
        "layout": "grid",
        "theme": "0d9efec7063f80a9",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "098d1fce540c81f6",
        "type": "ui-page",
        "name": "Historical Data",
        "ui": "0b0b3c3c94b9ba13",
        "path": "/historical_data",
        "icon": "history",
        "layout": "grid",
        "theme": "0d9efec7063f80a9",
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "0d9efec7063f80a9",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#5f96cd",
            "primary": "#5f96cd",
            "bgPage": "#6a6a6a",
            "groupBg": "#ffffff",
            "groupOutline": "#000000"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px",
            "density": "default"
        }
    },
    {
        "id": "0b0b3c3c94b9ba13",
        "type": "ui-base",
        "name": "UI Name",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control",
            "ui-iframe",
            "ui-template",
            "ui-markdown",
            "ui-form"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default"
    },
    {
        "id": "7cb82e68ba6fcb7a",
        "type": "influxdb",
        "z": "6479d747245de353",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "639e8e1d089a3e9b",
        "type": "pushsafer-api-key",
        "name": "AllERT's Pushsafer creds"
    },
    {
        "id": "f3e22a3182391f25",
        "type": "pushsafer-notification-template",
        "name": "For AllERT",
        "title": "AllERT",
        "icon": "1",
        "iconcolor": "#ff0000",
        "sound": "8",
        "vibration": "1",
        "priority": "2",
        "devices": "84294",
        "timetolive": "10",
        "retry": "60",
        "expire": "",
        "confirm": "",
        "answer": "0",
        "answeroptions": "",
        "answerforce": "",
        "url": "",
        "urltitle": "",
        "image": "",
        "image2": "",
        "image3": ""
    },
    {
        "id": "8fa919d05fcd9511",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e0edba24d19d9ed4",
        "type": "link in",
        "z": "337bbf4b93516ec5",
        "name": "Get Payload from Sensors Flow",
        "links": [
            "ad33f76b5732bd91"
        ],
        "x": 55,
        "y": 400,
        "wires": [
            [
                "0aceca714b8c35de",
                "ebbdcac23eff04b5"
            ]
        ]
    },
    {
        "id": "d074416fe75457f1",
        "type": "change",
        "z": "337bbf4b93516ec5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CSV_FILE_PATH",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 80,
        "wires": [
            [
                "dd507559409e63cc"
            ]
        ]
    },
    {
        "id": "dd507559409e63cc",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Convert Hex to String",
        "func": "const hexBuffer = msg.payload;\n\n// Convert the hex buffer to a Buffer object\nconst buffer = Buffer.from(hexBuffer, 'hex');\n\n// Convert the Buffer to a string\nconst string = buffer.toString();\n\nmsg.payload = string;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 80,
        "wires": [
            [
                "031e695eccd7a368"
            ]
        ]
    },
    {
        "id": "031e695eccd7a368",
        "type": "csv",
        "z": "337bbf4b93516ec5",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "fec52337eeb29584"
            ]
        ]
    },
    {
        "id": "fec52337eeb29584",
        "type": "change",
        "z": "337bbf4b93516ec5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSV",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 80,
        "wires": [
            [
                "d0acd38d8f1c4606"
            ]
        ]
    },
    {
        "id": "441b88706f702d51",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Update Inventory",
        "func": "// Retrieve the table data from flow context\nvar tableData = flow.get(\"CSV\") || [];\nvar msg_notify;\nvar itemsToUpdate = msg.payload;\n\n// Check if itemsToUpdate is an array\nif (Array.isArray(itemsToUpdate)) {\n\n    // Iterate over each item-quantity pair in the incoming payload\n    itemsToUpdate.forEach(function (record) {\n        var incomingItem = record.item ? record.item.trim() : null; // Ensure item name is not undefined and trimmed\n        var incomingQuantity = record.quantity ? parseFloat(record.quantity) : 0; // Ensure it's a number (default 0 if undefined)\n\n        if (incomingItem && incomingQuantity >= 0) { // Proceed only if both item and quantity are valid\n            \n            // Iterate over the table data to find the matching item\n            tableData.forEach(function (row) {\n                var tableItem = row['Resource'] ? row['Resource'].trim() : null; // Use 'Resource' instead of [0]\n\n                if (tableItem == incomingItem) { // Check for a match\n                    var remainingQuantity = row['Remaining Quantity'] != undefined ? parseFloat(row['Remaining Quantity']) : null;\n\n                    if (remainingQuantity != null) {\n                        //node.warn(\"Original remaining quantity for \" + incomingItem + \": \" + remainingQuantity);\n                        remainingQuantity -= incomingQuantity; // Subtract the incoming quantity\n                        row['Remaining Quantity'] = remainingQuantity; // Update the remaining quantity in the table\n                    }\n                }\n            });\n        } else {\n            //node.warn(\"Invalid item or quantity: \" + JSON.stringify(record));\n            msg_notify = { \"payload\": \"Invalid item or quantity: \" + JSON.stringify(record) };\n        }\n    });\n\n    // Save the updated table back to flow context\n    flow.set(\"CSV\", tableData);\n\n    msg.payload = tableData;\n    msg_notify = {\"payload\": \"Inventory Updated!\"};\n} else {\n    //node.warn(\"Incoming payload is not an array\");\n    msg_notify = { \"payload\": \"Incoming payload is not an array!\" };\n}\n\nreturn [msg,msg_notify];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 780,
        "wires": [
            [
                "d0acd38d8f1c4606"
            ],
            [
                "af2f4e5e2f7bdc47"
            ]
        ]
    },
    {
        "id": "9cf21d7942b8b01b",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Notify Severity Change",
        "func": "var msg_new = msg;\nvar str_severity = \"\";\n\nswitch (msg.payload[0].severity) {\n    case 1:\n        str_severity = \"MINOR\";\n        break;\n    case 2:\n        str_severity = \"MODERATE\";\n        break;\n    case 3:\n        str_severity = \"SEVERE\";\n        break;\n    case 4:\n        str_severity = \"CATASTROPHIC\";\n        break;\n}\n\nmsg_new.payload = msg.payload[0].location + \" has risen severity! New Level: \" + str_severity;\n\nreturn msg_new;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 460,
        "wires": [
            [
                "e622aa782ed34c5c"
            ]
        ]
    },
    {
        "id": "0aceca714b8c35de",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Check for Severity Level Change",
        "func": "//CHECK IF FLOOD SEVERITY HAS RISEN FOR SPECIFIC LOCATION\n//AND CALL PYTHON SCRIPTS FOR RESOURCE DISTRIBUTION\n\n//get Location Name (only first element when splitted by whitespace) and flood depth from sensor payload\nvar get_location = msg.payload[0][1].name.split(' ')[0];\n//var get_sensor_flood_depth = msg.payload[0][0].flood_depth;\n\n//calculate potential SEVERITY LEVEL based on value\nvar new_severity_level = 0;\nvar get_curr_severity_level = 100;\n\n//boolean control for level change\nvar severity_level_risen = false;\nvar severity_level_dropped = false;\n\nswitch(get_location) {\n  case \"Falani\":\n    get_curr_severity_level = global.get(\"FLOOD_SEVERITY_FALANI\").severity;\n    var sensors = global.get(\"SENSORS_FALANI\");\n    break;\n  case \"Larissa\":\n    get_curr_severity_level = global.get(\"FLOOD_SEVERITY_LARISSA\").severity;\n    var sensors = global.get(\"SENSORS_LARISSA\");\n    break;\n  case \"Dasochori\":\n    get_curr_severity_level = global.get(\"FLOOD_SEVERITY_DASOCHORI\").severity;\n    var sensors = global.get(\"SENSORS_DASOCHORI\");\n    break;\n  case \"Omorfochori\":\n    get_curr_severity_level = global.get(\"FLOOD_SEVERITY_OMORFOCHORI\").severity;\n    var sensors = global.get(\"SENSORS_OMORFOCHORI\");\n    break;\n  default:\n    //do nothing - something went wrong\n}\n\n//we will find the highest flood depth value\n//amongst sensors in the Location\n//which will determine the actual new_severity_level\n// Initialize the variable to store the highest Flood Depth ( = current sensor flood depth value)\nvar highest_reading_in_location = msg.payload[0][0].flood_depth;\n\nsensors.forEach(function (sensorData) {\n    var floodDepth = sensorData[\"Flood Depth\"];\n\n    // Compare and update the highest_reading_in_location if a higher value is found\n    if (highest_reading_in_location === null || floodDepth > highest_reading_in_location) {\n        highest_reading_in_location = floodDepth;\n    }\n});\n\n\nif (highest_reading_in_location >= global.get(\"THRESHOLD_CATASTROPHIC\")) {\n    new_severity_level = 4;\n\n} else if (highest_reading_in_location >= global.get(\"THRESHOLD_SEVERE\")) {\n    new_severity_level = 3;\n\n} else if (highest_reading_in_location >= global.get(\"THRESHOLD_MODERATE\")) {\n    new_severity_level = 2;\n\n} else if (highest_reading_in_location >= global.get(\"THRESHOLD\")) {\n    new_severity_level = 1;\n}\n\n//check if level has changed\nif (new_severity_level > get_curr_severity_level) {\n    //level has risen - change control boolean\n    severity_level_risen = true;\n\n} else if (new_severity_level < get_curr_severity_level) {\n    //level has dropped\n    severity_level_dropped = true;\n}\n\n//if severity has DROPPED or RISEN - update global var\nif (severity_level_dropped || severity_level_risen) {\n//if (severity_level_risen) {\n    switch(get_location) {\n        case \"Falani\":\n            global.set(\"FLOOD_SEVERITY_FALANI\", { \"location\": \"Falani\", \"severity\": new_severity_level });\n            break;\n        case \"Larissa\":\n            global.set(\"FLOOD_SEVERITY_LARISSA\", { \"location\": \"Larissa\", \"severity\": new_severity_level });\n            break;\n        case \"Dasochori\":\n            global.set(\"FLOOD_SEVERITY_DASOCHORI\", { \"location\": \"Dasochori\", \"severity\": new_severity_level });\n            break;\n        case \"Omorfochori\":\n            global.set(\"FLOOD_SEVERITY_OMORFOCHORI\", { \"location\": \"Omorfochori\", \"severity\": new_severity_level });\n            break;\n        default:\n            //do nothing - something went wrong            \n    } \n} \n\nif (severity_level_risen){    \n    //if severity has RISEN - make appropriate msg payload else return null\n\n    //make payload to send to python scripts\n    var triggered_flood_depth = msg.payload[0][0].flood_depth;\n    msg.payload = [{\"location\": get_location, \"severity\": new_severity_level, \"flood_depth\": triggered_flood_depth}];\n\n    return msg;\n\n} else {\n\n    return null;\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "9cf21d7942b8b01b",
                "97af74a747fc4447"
            ]
        ]
    },
    {
        "id": "41efcb9708a883f1",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Temporarily Save Selected Items to Collection",
        "func": "if (msg.payload == null) {return null;}\n\nvar tableData = flow.get(\"selected_to_dispatch\") || [];\n\nvar newItem = msg.payload;\n\n// Function to check if the object exists in the array\nfunction objectExists(array, obj) {\n    return array.some(function (el) {\n        return el.location == obj.location && el.item == obj.item && el.quantity == obj.quantity;\n    });\n}\n\n// Check if the item exists, if yes, remove it, otherwise add it\nvar itemAdded = true;\nif (objectExists(tableData, newItem)) {\n    // Filter out the existing item\n    tableData = tableData.filter(function (el) {\n        return !(el.location == newItem.location && el.item == newItem.item && el.quantity == newItem.quantity);\n    });\n    itemAdded = false;\n} else {\n    // Add the new item to the beginning of the array\n    tableData.unshift(newItem);\n}\n\nmsg.payload = tableData;\n\nflow.set(\"selected_to_dispatch\", tableData);\n\nlet outputString = \"\";\n\n// Loop through the input array and format each object, appending to the string\nmsg.payload.forEach(function (entry) {\n    outputString += `[${entry.location}: ${entry.quantity} ${entry.item}] `;\n});\n\n// Trim any trailing spaces\noutputString = outputString.trim();\n\n// Set the output string to the message payload\nmsg.payload = outputString;\n\n//UPDATE DECISIONS TABLE\nvar msg_decisions;\nvar tableData = flow.get(\"decisions\") || [];\n\n// Iterate through the tableData to find the matching object and toggle its \"selected\" value\ntableData = tableData.map(function (el) {\n    if (el.location == newItem.location && el.item == newItem.item && el.quantity == newItem.quantity) {\n        // Toggle the 'selected' value\n        el.selected = !el.selected;\n    }\n    return el;\n});\n\nmsg_decisions = {\"payload\": tableData};\n\nflow.set(\"decisions\", tableData);\n\nreturn [msg_decisions, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 760,
        "wires": [
            [
                "10f6271186b61996"
            ],
            [
                "23db3e43e531c489",
                "af2f4e5e2f7bdc47"
            ]
        ]
    },
    {
        "id": "873f76c83b2fa934",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Send selected items for Dispatch and Inventory update",
        "func": "//msg -> 1 for Inventory update\n//msg_txt -> 2 for text box\n//msg_notify ->3 for notification window\n\nvar msg_txt;\nvar msg_notify; \n\n//if no items then do nothing\nif (flow.get(\"selected_to_dispatch\").length == 0) {\n    //no items selected for dispatch\n    msg_notify = {\"payload\": \"No Items currently selected for dispatch!\"}\n    return [null, null, msg_notify];\n}\n\nmsg.payload = flow.get(\"selected_to_dispatch\")\n\n//clear selected items\nflow.set(\"selected_to_dispatch\",[]);\n\nmsg_txt = { \"payload\": [] }\n\nreturn [msg, msg_txt, null];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 980,
        "wires": [
            [
                "441b88706f702d51",
                "c7d992e0d1267848"
            ],
            [
                "23db3e43e531c489"
            ],
            [
                "af2f4e5e2f7bdc47"
            ]
        ]
    },
    {
        "id": "d6c45761359e0f31",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Clean Resource Allocation Table",
        "func": "//clear variable\nflow.set(\"decisions\", []);\nflow.set(\"msg_Falani\", []);\nflow.set(\"msg_Larissa\", []);\nflow.set(\"msg_Dasochori\", []);\nflow.set(\"msg_Omorfochori\", []);\n\n//table\nmsg.payload = [];\n\n//notify\nvar msg_notify = {\"payload\": \"Resource Allocation Table CLEARED!\"};\n\nreturn [msg,msg_notify];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1300,
        "wires": [
            [
                "10f6271186b61996",
                "eb239c1c2522eadb",
                "c6e2f2695bebfe89",
                "dc77301299b9230f",
                "49ac248168fc9e2d"
            ],
            [
                "af2f4e5e2f7bdc47"
            ]
        ]
    },
    {
        "id": "0929948c250facf3",
        "type": "inject",
        "z": "337bbf4b93516ec5",
        "name": "Clean Resource Allocation Table",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1320,
        "wires": [
            [
                "d6c45761359e0f31"
            ]
        ]
    },
    {
        "id": "762de5af0be08d65",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Delete Selected to Dispatch Items",
        "func": "var selectedToDispatch = flow.get(\"selected_to_dispatch\") || [];\nvar decisions = flow.get(\"decisions\") || [];\n\n//Remove matching items from the decisions array\nselectedToDispatch.forEach(function (selectedItem) {\n    decisions = decisions.filter(function (decisionItem) {\n        var isMatch = selectedItem.location === decisionItem.location &&\n            selectedItem.item === decisionItem.item &&\n            selectedItem.quantity === decisionItem.quantity;\n\n        return !isMatch; // Keep only items that don't match\n    });\n});\n\nflow.set(\"decisions\", decisions);\n\nvar msg_decisions;\nmsg_decisions = { \"payload\": decisions };\n\n//clear collection of items\nflow.set(\"selected_to_dispatch\", []);\n\n//text box\nmsg.payload = [];\n\n//notify\nvar msg_notify = { \"payload\": \"Resources selecton for dispatch CLEARED!\" };\n\n\nreturn [msg_decisions,msg, msg_notify];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 920,
        "wires": [
            [
                "10f6271186b61996"
            ],
            [
                "23db3e43e531c489"
            ],
            [
                "af2f4e5e2f7bdc47"
            ]
        ]
    },
    {
        "id": "c7d992e0d1267848",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Update Location Resource Tables",
        "func": "var selectedToDispatch = msg.payload;\nvar decisions = flow.get(\"decisions\") || [];\n\n// Get current date and time for \"Date of Approval\"\nvar now = new Date();\nvar day = (\"0\" + now.getDate()).slice(-2);  // Add leading zero if necessary\nvar month = (\"0\" + (now.getMonth() + 1)).slice(-2);  // Month is zero-based, so add 1\nvar year = now.getFullYear();\nvar hours = (\"0\" + now.getHours()).slice(-2);  // Add leading zero if necessary\nvar minutes = (\"0\" + now.getMinutes()).slice(-2);  // Add leading zero if necessary\n\nvar currentDateTime = day + \"/\" + month + \"/\" + year + \" \" + hours + \":\" + minutes;\n\n// Step 1: Remove matching items from the decisions array\nselectedToDispatch.forEach(function (selectedItem) {\n    decisions = decisions.filter(function (decisionItem) {\n        var isMatch = selectedItem.location === decisionItem.location &&\n            selectedItem.item === decisionItem.item &&\n            selectedItem.quantity === decisionItem.quantity;\n\n        return !isMatch; // Keep only items that don't match\n    });\n});\n\n// Store the updated decisions array back to the flow and assign it to msg.payload\nflow.set(\"decisions\", decisions);\nmsg.payload = decisions;\n\n// Step 2: Ensure flow variables are arrays or initialize as empty arrays\nvar falaniItems = Array.isArray(flow.get(\"msg_Falani\")) ? flow.get(\"msg_Falani\") : [];\nvar larissaItems = Array.isArray(flow.get(\"msg_Larissa\")) ? flow.get(\"msg_Larissa\") : [];\nvar dasochoriItems = Array.isArray(flow.get(\"msg_Dasochori\")) ? flow.get(\"msg_Dasochori\") : [];\nvar omorfochoriItems = Array.isArray(flow.get(\"msg_Omorfochori\")) ? flow.get(\"msg_Omorfochori\") : [];\n\n// Group items by location and modify each object\nselectedToDispatch.forEach(function (item) {\n    // Remove \"selected\" key and add \"Date of Approval\"\n    delete item.selected;\n    item[\"Date of Approval\"] = currentDateTime;\n\n    // Append to corresponding location array\n    switch (item.location) {\n        case \"Falani\":\n            falaniItems.push(item);\n            break;\n        case \"Larissa\":\n            larissaItems.push(item);\n            break;\n        case \"Dasochori\":\n            dasochoriItems.push(item);\n            break;\n        case \"Omorfochori\":\n            omorfochoriItems.push(item);\n            break;\n    }\n});\n\n// Assign the updated arrays to the respective msg_<location> objects\nvar msg_Falani = { \"payload\": falaniItems };\nvar msg_Larissa = { \"payload\": larissaItems };\nvar msg_Dasochori = { \"payload\": dasochoriItems };\nvar msg_Omorfochori = { \"payload\": omorfochoriItems };\n\n// Store the updated location data back to the flow to preserve existing data\nflow.set(\"msg_Falani\", falaniItems);\nflow.set(\"msg_Larissa\", larissaItems);\nflow.set(\"msg_Dasochori\", dasochoriItems);\nflow.set(\"msg_Omorfochori\", omorfochoriItems);\n\n// Return the message\nreturn [msg, msg_Falani, msg_Larissa, msg_Dasochori, msg_Omorfochori];",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1160,
        "wires": [
            [
                "10f6271186b61996"
            ],
            [
                "eb239c1c2522eadb"
            ],
            [
                "c6e2f2695bebfe89"
            ],
            [
                "dc77301299b9230f"
            ],
            [
                "49ac248168fc9e2d"
            ]
        ]
    },
    {
        "id": "990cb3149b6b6d47",
        "type": "change",
        "z": "337bbf4b93516ec5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSV_FILE_PATH",
                "pt": "flow",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "97af74a747fc4447",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "predict_Node",
        "func": "msg.payload = {\n    \"location\": msg.payload[0].location,\n    \"severity\": msg.payload[0].severity,\n    \"flood_depth\": msg.payload[0].flood_depth,\n    \"script_name\": \"predict_Node.py\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "cbe69805df9e41fd"
            ]
        ]
    },
    {
        "id": "20a08d699215d709",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Parse JSON",
        "func": "try {\n    let payloadObj = JSON.parse(msg.payload);  // Convert payload to a JSON object\n\n    // Check if the 'output' field exists and is a valid string\n    if (payloadObj && payloadObj.output) {\n        try {\n            \n            let outputString = payloadObj.output.trim();\n\n            // Parse the output string as JSON\n            let outputJson = JSON.parse(outputString);\n\n            // Check if the 'script' is \"create dataset\"\n            if (outputJson.script === \"create dataset\") {\n                // Combine 'message', 'script', and 'csv_path' fields into one object\n                msg.payload = {\n                    message: payloadObj.message,\n                    script: outputJson.script,\n                    csv_path: outputJson.csv_path  \n                };\n            } \n            // Check if the 'script' is \"train model\"\n            else if (outputJson.script === \"train model\") {\n                // Combine 'message', 'script', and evaluation metrics into one object\n                msg.payload = {\n                    message: payloadObj.message,\n                    script: outputJson.script,\n                    val_mean_absolute_error: outputJson.validation_set_metrics.mean_absolute_error,\n                    val_mean_squared_error: outputJson.validation_set_metrics.mean_squared_error,\n                    val_r_squared: outputJson.validation_set_metrics.r_squared,\n                    val_smape: outputJson.validation_set_metrics.smape + \"%\",\n                    test_mean_absolute_error: outputJson.test_set_metrics.mean_absolute_error,\n                    test_mean_squared_error: outputJson.test_set_metrics.mean_squared_error,\n                    test_r_squared: outputJson.test_set_metrics.r_squared,\n                    test_smape: outputJson.test_set_metrics.smape + \"%\",\n                    trained_model_path: outputJson.trained_model_path\n                };\n            } \n            // Check if the 'script' is \"predict\"\n            else if (outputJson.script === \"predict\") {\n                // Combine 'message', 'script', and 'decisions' into one object\n                msg.payload = {\n                    message: payloadObj.message,\n                    script: outputJson.script,\n                    decisions: outputJson.decisions\n                };\n            } \n            else {\n                // If the script is neither recognized, return an error message\n                msg.payload = { error: \"Script is not recognized.\" };\n            }\n        } catch (e) {            \n            msg.payload = { error: \"Invalid output format\" };\n        }\n    } else {\n        msg.payload = { error: \"No output provided\" };\n    }\n} catch (e) {\n    msg.payload = { error: \"Invalid payload format\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 380,
        "wires": [
            [
                "8d5465485a4177ec",
                "b9e2093ed1890ea3"
            ]
        ]
    },
    {
        "id": "8d5465485a4177ec",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Send Decisions to Table",
        "func": "// Check if the script is \"predict\"\nif (msg.payload && msg.payload.script === \"predict\") {\n    // Retrieve the existing 'decisions' from the flow context or initialize an empty array\n    var tableData = flow.get(\"decisions\") || [];\n    \n    // Parse the decisions array from msg.payload and unshift each decision into tableData\n    if (msg.payload.decisions && Array.isArray(msg.payload.decisions)) {\n        // Loop through each decision and unshift it into the tableData array\n        msg.payload.decisions.forEach(function(decision) {\n            tableData.unshift(decision);\n        });\n    }\n\n    // Set the updated tableData in the flow context\n    flow.set(\"decisions\", tableData);\n\n    // Set the updated tableData as the message payload\n    msg.payload = tableData;\n\n    return msg;\n\n} else {\n    // If the script is not \"predict\", pass an error message or return an unchanged payload\n    //msg.payload = { error: \"Script is not 'predict'.\" };\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 440,
        "wires": [
            [
                "10f6271186b61996"
            ]
        ]
    },
    {
        "id": "b9e2093ed1890ea3",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Send Notification",
        "func": "var str_message = \"\";\n\nif (msg.payload && msg.payload.script === \"create dataset\") {\n    str_message = msg.payload.csv_path + \" successfully created!\";\n    msg.payload = str_message;\n    return [msg, null, null];\n\n} else if (msg.payload && msg.payload.script === \"train model\") {\n    str_message = \"Model successfully Trained! Trained Model Path:\" + msg.payload.trained_model_path;\n    \n    var str_message_validation = \"Validation Set Metrics -\" +\n                \" Mean Absolute Error (MAE): \" + msg.payload.val_mean_absolute_error +\n                \", Mean Squared Error (MSE): \" + msg.payload.val_mean_squared_error +\n                \", R Squared (R2): \" + msg.payload.val_r_squared +\n                \", Symmetric Mean Absolute Percentage Error (SMAPE): \" + msg.payload.val_smape;\n    \n    var str_message_test = \"Test Set Metrics -\" + \n                \" Mean Absolute Error (MAE): \" + msg.payload.test_mean_absolute_error +\n                \", Mean Squared Error (MSE): \" + msg.payload.test_mean_squared_error +\n                \", R Squared (R2): \" + msg.payload.test_r_squared +\n                \", Symmetric Mean Absolute Percentage Error (SMAPE): \" + msg.payload.test_smape;\n  \n\n    msg.payload = str_message;\n    var msg_for_text_validation = { \"payload\": str_message_validation };\n    var msg_for_text_test = { \"payload\": str_message_test }; \n    \n    return [msg, msg_for_text_validation, msg_for_text_test];\n    \n} else {\n\n    return [null, null, null];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 200,
        "wires": [
            [
                "1e76eb42b7b1f248"
            ],
            [
                "65380284fe4dade3"
            ],
            [
                "3c01e131542ad7ec"
            ]
        ]
    },
    {
        "id": "03bd2bee2f234813",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "create_dataset_Node",
        "func": "let userInput = parseInt(flow.get(\"input_dataset_rows\"));\nlet dataset_rows;\n\nif (isNaN(userInput) || userInput <= 500) {\n    dataset_rows = 500; // Set default value to 500\n} else {\n    dataset_rows = userInput; // Use the valid user input\n}\n\n// Append the decision_trees and script_name to msg.payload\nmsg.payload = {\n    \"dataset_rows\": dataset_rows,\n    \"script_name\": \"create_dataset_Node.py\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "f30818e4adcf8111"
            ]
        ]
    },
    {
        "id": "a9c3c1921907170e",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "train_RF_Node",
        "func": "let userInput_trees = parseInt(flow.get(\"input_decision_trees\"));\nlet userInput_depth = parseInt(flow.get(\"input_forest_depth\"));\n\nlet decision_trees;\nif (isNaN(userInput_trees) || userInput_trees <= 100) {\n    decision_trees = 100; // Set default value to 100\n} else {\n    decision_trees = userInput_trees; // Use the valid user input\n}\n\nlet forest_depth;\nif (isNaN(userInput_depth) || userInput_depth <= 0) {\n    forest_depth = 0; // Set default value to 0 - that will be set to None in the script\n} else if (userInput_depth <= 10) {  \n    forest_depth = 10; //minimum depth \n} else {\n    forest_depth = userInput_depth; // Use the valid user input\n}\n\n// Append the decision_trees and script_name to msg.payload\nmsg.payload = {\n    \"decision_trees\": decision_trees,\n    \"forest_depth\": forest_depth,\n    \"script_name\": \"train_RF_Node.py\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            [
                "f30818e4adcf8111"
            ]
        ]
    },
    {
        "id": "42ae67133bd6f2d6",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "store user selected Dataset Rows",
        "func": "flow.set(\"input_dataset_rows\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c80ce5d9800af98a",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "store user selected Dataset Rows",
        "func": "flow.set(\"input_decision_trees\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b45626c3041fddf0",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "store user selected Forest Depth",
        "func": "flow.set(\"input_forest_depth\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "39f62d838be41262",
        "type": "http request",
        "z": "337bbf4b93516ec5",
        "name": "ngrok HTTP Request",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 380,
        "wires": [
            [
                "20a08d699215d709"
            ]
        ]
    },
    {
        "id": "f30818e4adcf8111",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Setup HTTP Request Params",
        "func": "// Set the dynamic URL\nmsg.url = flow.get(\"input_ngrok_url\") + \"/run-script\"; \n\n//set request configuration\nmsg.method = \"POST\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "39f62d838be41262"
            ]
        ]
    },
    {
        "id": "2af5de44d32a5739",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "store user selected Dataset Rows",
        "func": "flow.set(\"input_ngrok_url\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "56774750dabd2e6d",
        "type": "change",
        "z": "337bbf4b93516ec5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DATASET_FILE_PATH",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1480,
        "wires": [
            [
                "256220a68a620afd"
            ]
        ]
    },
    {
        "id": "256220a68a620afd",
        "type": "function",
        "z": "337bbf4b93516ec5",
        "name": "Convert Hex to String",
        "func": "const hexBuffer = msg.payload;\n\n// Convert the hex buffer to a Buffer object\nconst buffer = Buffer.from(hexBuffer, 'hex');\n\n// Convert the Buffer to a string\nconst string = buffer.toString();\n\nmsg.payload = string;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1480,
        "wires": [
            [
                "7511a697051d14f1"
            ]
        ]
    },
    {
        "id": "7511a697051d14f1",
        "type": "csv",
        "z": "337bbf4b93516ec5",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 290,
        "y": 1540,
        "wires": [
            [
                "7250cfec157d10fe"
            ]
        ]
    },
    {
        "id": "7250cfec157d10fe",
        "type": "change",
        "z": "337bbf4b93516ec5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "DATASET_FILE_PATH",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1540,
        "wires": [
            [
                "c4f8fa32f5761e9e"
            ]
        ]
    },
    {
        "id": "c875bb8d9c0bf9cf",
        "type": "change",
        "z": "337bbf4b93516ec5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "DATASET_FILE_PATH",
                "pt": "flow",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "0ee15e3bc283334e",
        "type": "catch",
        "z": "337bbf4b93516ec5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 780,
        "y": 40,
        "wires": [
            [
                "e3674641d07b2383"
            ]
        ]
    },
    {
        "id": "5a51b4bf62be2468",
        "type": "ui-text-input",
        "z": "337bbf4b93516ec5",
        "group": "e91f9beba28850d9",
        "name": "txt_DatasetRows",
        "label": "Number of Training Dataset Rows (default: 500)",
        "order": 1,
        "width": "5",
        "height": "1",
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "42ae67133bd6f2d6"
            ]
        ]
    },
    {
        "id": "c1d2941922d8ee2f",
        "type": "ui-text-input",
        "z": "337bbf4b93516ec5",
        "group": "74689fbe24459bb0",
        "name": "txt_NumberOfDecisionTrees",
        "label": "Number of Decision Trees (default:100)",
        "order": 1,
        "width": "5",
        "height": "1",
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "c80ce5d9800af98a"
            ]
        ]
    },
    {
        "id": "68d8965e0dc7fe80",
        "type": "ui-text-input",
        "z": "337bbf4b93516ec5",
        "group": "74689fbe24459bb0",
        "name": "txt_ForestDepth",
        "label": "Forest Depth (default:0 [max])",
        "order": 2,
        "width": "5",
        "height": "1",
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "b45626c3041fddf0"
            ]
        ]
    },
    {
        "id": "6b6a2461b996be62",
        "type": "ui-text-input",
        "z": "337bbf4b93516ec5",
        "group": "7891f14de76736f7",
        "name": "txt_ngrok_url",
        "label": "Ngrok Forwarding URL",
        "order": 1,
        "width": "5",
        "height": "1",
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 210,
        "y": 560,
        "wires": [
            [
                "2af5de44d32a5739"
            ]
        ]
    },
    {
        "id": "7f0133a7dabb79a2",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "b73dc5151c8cd587",
        "name": "",
        "label": "Upload",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "d074416fe75457f1"
            ]
        ]
    },
    {
        "id": "5979a1165473e1f6",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "btn_Accept",
        "label": "Accept",
        "order": 5,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "873f76c83b2fa934"
            ]
        ]
    },
    {
        "id": "533a35a58a850731",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "btn_Reject",
        "label": "Reject",
        "order": 4,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "762de5af0be08d65"
            ]
        ]
    },
    {
        "id": "548d086ca7250178",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "btn_CleanDecisionsTable",
        "label": "Clean Resource Allocation Tables",
        "order": 3,
        "width": 0,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 210,
        "y": 1280,
        "wires": [
            [
                "d6c45761359e0f31"
            ]
        ]
    },
    {
        "id": "ce928c462173be5f",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "e91f9beba28850d9",
        "name": "btn_CreateTrainingDataset",
        "label": "Create",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "03bd2bee2f234813"
            ]
        ]
    },
    {
        "id": "6927fd7eb36bb904",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "74689fbe24459bb0",
        "name": "btn_TrainModel",
        "label": "Start Training",
        "order": 3,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "a9c3c1921907170e"
            ]
        ]
    },
    {
        "id": "b81ca8fd8c9bb1e4",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "7891f14de76736f7",
        "name": "btn_saveNgrokURL",
        "label": "Save",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "URL Saved",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 230,
        "y": 520,
        "wires": [
            [
                "e622aa782ed34c5c"
            ]
        ]
    },
    {
        "id": "cf39eb496a04ae15",
        "type": "ui-button",
        "z": "337bbf4b93516ec5",
        "group": "d8e9abb3aebafa5c",
        "name": "",
        "label": "Load",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "56774750dabd2e6d"
            ]
        ]
    },
    {
        "id": "5f8a2c68fd607ce5",
        "type": "ui-text",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "order": 6,
        "width": "12",
        "height": "1",
        "name": "txt_Falani_allocated",
        "label": "Falani Allocated Resources",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1140,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7d15314724d3bda2",
        "type": "ui-text",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "order": 8,
        "width": "12",
        "height": "1",
        "name": "txt_Larissa_allocated",
        "label": "Larissa Allocated Resources",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1140,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a47578743f700492",
        "type": "ui-text",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "order": 10,
        "width": "12",
        "height": "1",
        "name": "txtDasochori_allocated",
        "label": "Dasochori Allocated Resources",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1140,
        "y": 1320,
        "wires": []
    },
    {
        "id": "e1eef8e910c59c87",
        "type": "ui-text",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "order": 12,
        "width": "12",
        "height": "1",
        "name": "txt_Omorfochori_allocated",
        "label": "Omorfochori Allocated Resources",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "23db3e43e531c489",
        "type": "ui-text",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "order": 2,
        "width": "12",
        "height": "1",
        "name": "txt_SelectedResources",
        "label": "Selected Resources:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": "12",
        "color": "#5910c6",
        "className": "",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "65380284fe4dade3",
        "type": "ui-text",
        "z": "337bbf4b93516ec5",
        "group": "5bebe7e6e21d99f6",
        "order": 1,
        "width": "12",
        "height": "1",
        "name": "txt_RandomForest_ValidationMetrics",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1350,
        "y": 220,
        "wires": []
    },
    {
        "id": "af2f4e5e2f7bdc47",
        "type": "ui-notification",
        "z": "337bbf4b93516ec5",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "",
        "x": 1130,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "1e76eb42b7b1f248",
        "type": "ui-notification",
        "z": "337bbf4b93516ec5",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "",
        "x": 1290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e622aa782ed34c5c",
        "type": "ui-notification",
        "z": "337bbf4b93516ec5",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "",
        "x": 550,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e3674641d07b2383",
        "type": "ui-notification",
        "z": "337bbf4b93516ec5",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top left",
        "colorDefault": false,
        "color": "#e60505",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notification_window",
        "x": 990,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "eb239c1c2522eadb",
        "type": "ui-table",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "tbl_Falani Allocated Resources",
        "label": "text",
        "order": 7,
        "width": "12",
        "height": "2",
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "x": 1170,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "c6e2f2695bebfe89",
        "type": "ui-table",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "tbl_Larissa Allocated Resources",
        "label": "text",
        "order": 9,
        "width": "12",
        "height": "2",
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "x": 1170,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "dc77301299b9230f",
        "type": "ui-table",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "tbl_Dasochori Allocated Resources",
        "label": "text",
        "order": 11,
        "width": "12",
        "height": "2",
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "x": 1180,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "49ac248168fc9e2d",
        "type": "ui-table",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "tbl_Omorfochori Allocated Resources",
        "label": "text",
        "order": 13,
        "width": "12",
        "height": "2",
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "x": 1190,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "d0acd38d8f1c4606",
        "type": "ui-table",
        "z": "337bbf4b93516ec5",
        "group": "b73dc5151c8cd587",
        "name": "Inventory",
        "label": "text",
        "order": 3,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "x": 1400,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "10f6271186b61996",
        "type": "ui-table",
        "z": "337bbf4b93516ec5",
        "group": "22f7beb3687cadc6",
        "name": "Decisions",
        "label": "text",
        "order": 1,
        "width": "12",
        "height": "5",
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "click",
        "columns": [
            {
                "title": "Location",
                "key": "location",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Resource",
                "key": "item",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "QTY",
                "key": "quantity",
                "type": "text",
                "width": "",
                "align": "end"
            },
            {
                "title": "",
                "key": "selected",
                "type": "tickcross",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "",
                "type": "button",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "",
        "mobileBreakpointType": "none",
        "x": 920,
        "y": 520,
        "wires": [
            [
                "41efcb9708a883f1"
            ]
        ]
    },
    {
        "id": "c4f8fa32f5761e9e",
        "type": "ui-table",
        "z": "337bbf4b93516ec5",
        "group": "d8e9abb3aebafa5c",
        "name": "Table_Historical_Training_Dataset",
        "label": "text",
        "order": 3,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "lg",
        "mobileBreakpointType": "defaults",
        "x": 860,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "71c594d011fa2492",
        "type": "ui-template",
        "z": "337bbf4b93516ec5",
        "group": "b73dc5151c8cd587",
        "page": "",
        "ui": "",
        "name": "Select CSV file",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<v-file-input show-size multiple chips :rules=\"rules\" accept=\".csv\"\n    variant=\"underlined\" label=\"File input\" v-on:change=\"uploadFile\" v-model=\"value\"\n    active-color=\"primary\" @update:modelValue=\"send({payload: value})\" />\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "990cb3149b6b6d47"
            ]
        ]
    },
    {
        "id": "63da27329389753d",
        "type": "ui-template",
        "z": "337bbf4b93516ec5",
        "group": "d8e9abb3aebafa5c",
        "page": "",
        "ui": "",
        "name": "Select CSV file",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<v-file-input show-size multiple chips :rules=\"rules\" accept=\".csv\"\n    variant=\"underlined\" label=\"File input\" v-on:change=\"uploadFile\" v-model=\"value\"\n    active-color=\"primary\" @update:modelValue=\"send({payload: value})\" />\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 1420,
        "wires": [
            [
                "c875bb8d9c0bf9cf"
            ]
        ]
    },
    {
        "id": "ebbdcac23eff04b5",
        "type": "debug",
        "z": "337bbf4b93516ec5",
        "name": "FROM LINK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 660,
        "wires": []
    },
    {
        "id": "3c01e131542ad7ec",
        "type": "ui-text",
        "z": "337bbf4b93516ec5",
        "group": "5bebe7e6e21d99f6",
        "order": 2,
        "width": "12",
        "height": "1",
        "name": "txt_RandomForest_TestMetrics",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1330,
        "y": 280,
        "wires": []
    },
    {
        "id": "cbe69805df9e41fd",
        "type": "delay",
        "z": "337bbf4b93516ec5",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 340,
        "wires": [
            [
                "f30818e4adcf8111"
            ]
        ]
    },
    {
        "id": "bfbbd49cfa2ff127",
        "type": "catch",
        "z": "4cc631e446fbfee4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "78f111f2019eda17"
            ]
        ]
    },
    {
        "id": "120cdf904d92a10e",
        "type": "ui-iframe",
        "z": "4cc631e446fbfee4",
        "name": "ArcGIS Map",
        "group": "e9bb2b51ce473b0b",
        "order": 1,
        "src": "https://uthess.maps.arcgis.com/apps/mapviewer/index.html?webmap=ca8720fd14ce473bb5f23260b61b5d93",
        "width": "20",
        "height": "20",
        "x": 130,
        "y": 200,
        "wires": []
    },
    {
        "id": "1da4a13efac39ec3",
        "type": "ui-iframe",
        "z": "4cc631e446fbfee4",
        "name": "Route before flood",
        "group": "78b23e52ee56139f",
        "order": 1,
        "src": "https://allert-demie.s3.eu-north-1.amazonaws.com/NoFloodRoute.PNG",
        "width": "20",
        "height": "20",
        "x": 150,
        "y": 260,
        "wires": []
    },
    {
        "id": "a37c49e0849e45d8",
        "type": "ui-iframe",
        "z": "4cc631e446fbfee4",
        "name": "Route after Flood",
        "group": "b018127baa0a7e76",
        "order": 1,
        "src": "https://allert-demie.s3.eu-north-1.amazonaws.com/FloodRoute.PNG",
        "width": "20",
        "height": "20",
        "x": 150,
        "y": 320,
        "wires": []
    },
    {
        "id": "78f111f2019eda17",
        "type": "ui-notification",
        "z": "4cc631e446fbfee4",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top left",
        "colorDefault": false,
        "color": "#e60505",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notification_window",
        "x": 330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "57af80695b36ea94",
        "type": "comment",
        "z": "6479d747245de353",
        "name": "Notes 4 InfluxDB",
        "info": "\n//Cluster URL (Host Name)\nhttps://us-east-1-1.aws.cloud2.influxdata.com\n\n//Organization\nCSIoT\n\n//Bucket\nDemieRed\n\n//measurement\nAllERT_Sensors",
        "x": 760,
        "y": 1700,
        "wires": []
    },
    {
        "id": "d77289ad38200bb9",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Falani North [1:Point]",
        "func": "//1\tFalani_North [1:Point]\t0\t-1\t0\t0\t22,40991275\t39,73259648\n\n// Retrieve FALANI sensors\nvar sensors = global.get(\"SENSORS_FALANI\");\n\n//name \nvar get_name = \"Falani North [1:Point]\";\n\n//location\nvar get_lon = 22.40991275;\nvar get_lat = 39.73259648;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    //Flooding event ongoing - values rise\n    // Increase by 10 to 59 mm\n    get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n    if (get_random_water_level > 3000) {\n        // Cap at 3000 mm\n        get_random_water_level = 3000;\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\n\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_FALANI\nglobal.set(\"SENSORS_FALANI\", sensors);\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat        \n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "c809fedf5f238015"
            ]
        ]
    },
    {
        "id": "9bb9dd07b5052e55",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Falani Pinios [2:Point]",
        "func": "//2\tFalani_Pinios [2:Point]\t0\t-1\t0\t0\t22,41551653\t39,72582177\n\n// Retrieve FALANI sensors\nvar sensors = global.get(\"SENSORS_FALANI\");\n\n//name \nvar get_name = \"Falani Pinios [2:Point]\";\n\n//location\nvar get_lon = 22.41551653;\nvar get_lat = 39.72582177;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    if (flow.get(\"FORCE_AllERT\") == 1) {\n        //force sensor to give reading over THRESHOLD\n        get_random_water_level = global.get(\"THRESHOLD\") + Math.floor(Math.random() * 50) + 10;\n    } else {\n        // Increase by 10 to 59 mm\n        get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n        if (get_random_water_level > 3000) {\n            // Cap at 3000 mm\n            get_random_water_level = 3000;\n        }\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n///TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_FALANI\nglobal.set(\"SENSORS_FALANI\", sensors);\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature        \n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat        \n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 980,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "ad92895236dd4b63"
            ]
        ]
    },
    {
        "id": "cd83eefab2508d24",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Falani East [3:Point]",
        "func": "//3\tFalani_East [3:Point]\t0\t-1\t0\t0\t22,40978966\t39,71552728\n\n// Retrieve FALANI sensors\nvar sensors = global.get(\"SENSORS_FALANI\");\n\n//name \nvar get_name = \"Falani East [3:Point]\";\n\n//location\nvar get_lon = 22.40978966;\nvar get_lat = 39.71552728;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    if (flow.get(\"FORCE_AllERT\") == 1) {\n        //force sensor to give reading over THRESHOLD\n        get_random_water_level = global.get(\"THRESHOLD\") + Math.floor(Math.random() * 50) + 10;\n    } else {\n        // Increase by 10 to 59 mm\n        get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n        if (get_random_water_level > 3000) {\n            // Cap at 3000 mm\n            get_random_water_level = 3000;\n        }\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_FALANI\nglobal.set(\"SENSORS_FALANI\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature        \n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat        \n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1020,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "25b45ea1420d84da"
            ]
        ]
    },
    {
        "id": "f49718991c559bf7",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Falani South [4:Point]",
        "func": "//4\tFalani_South [4:Point]\t0\t-1\t0\t0\t22,41327977\t39,70643052\n\n// Retrieve FALANI sensors\nvar sensors = global.get(\"SENSORS_FALANI\");\n\n//name \nvar get_name = \"Falani South [4:Point]\";\n\n//location\nvar get_lon = 22.41327977;\nvar get_lat = 39.70643052;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    //Flooding event ongoing - values rise\n    // Increase by 10 to 59 mm\n    get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n    if (get_random_water_level > 3000) {\n        // Cap at 3000 mm\n        get_random_water_level = 3000;\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_FALANI\nglobal.set(\"SENSORS_FALANI\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat\n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1060,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "6162f1a556459c84"
            ]
        ]
    },
    {
        "id": "b84d4436d4f860dc",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Falani Center [5:Point]",
        "func": "//5\tFalani_Center [5:Point]\t0\t-1\t0\t0\t22,39711284\t39,7220062\n\n// Retrieve FALANI sensors\nvar sensors = global.get(\"SENSORS_FALANI\");\n\n//name \nvar get_name = \"Falani Center [5:Point]\";\n\n//location\nvar get_lon = 22.39711284;\nvar get_lat = 39.7220062;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    if (flow.get(\"FORCE_AllERT\") == 1) {\n        //force sensor to give reading over THRESHOLD\n        get_random_water_level = global.get(\"THRESHOLD\") + Math.floor(Math.random() * 50) + 10;\n    } else {\n        // Increase by 10 to 59 mm\n        get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n        if (get_random_water_level > 3000) {\n            // Cap at 3000 mm\n            get_random_water_level = 3000;\n        }\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_FALANI\nglobal.set(\"SENSORS_FALANI\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat\n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1100,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "1d864be5054b59f5"
            ]
        ]
    },
    {
        "id": "6415b7fb26b11a20",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Larissa DEYAL [6:Point]",
        "func": "//6\tLarissa_DEYAL [6:Point]\t0\t-1\t0\t0\t22,40034696\t39,63668437\n\n// Retrieve LARISSA sensors\nvar sensors = global.get(\"SENSORS_LARISSA\");\n\n//name \nvar get_name = \"Larissa DEYAL [6:Point]\";\n\n//location\nvar get_lon = 22.40034696;\nvar get_lat = 39.63668437;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    //Flooding event ongoing - values rise\n    // Increase by 10 to 59 mm\n    get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n    if (get_random_water_level > 2000) {\n        // Cap at 2000 mm\n        get_random_water_level = 2000;\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_LARISSA\nglobal.set(\"SENSORS_LARISSA\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat\n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1140,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "58ced30270dd7791"
            ]
        ]
    },
    {
        "id": "26a22c54423b64e1",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Larissa KTEL [7:Point]",
        "func": "//7\tLarissa_KTEL [7:Point]\t0\t-1\t0\t0\t22,41181098\t39,65160047\n\n// Retrieve LARISSA sensors\nvar sensors = global.get(\"SENSORS_LARISSA\");\n\n//name \nvar get_name = \"Larissa KTEL [7:Point]\";\n\n//location\nvar get_lon = 22.41181098;\nvar get_lat = 39.65160047;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    //Flooding event ongoing - values rise\n    // Increase by 10 to 59 mm\n    get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n    if (get_random_water_level > 2000) {\n        // Cap at 2000 mm\n        get_random_water_level = 2000;\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function (sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n\n// Store the updated sensors array back to the global variable SENSORS_LARISSA\nglobal.set(\"SENSORS_LARISSA\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat\n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1180,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "14e31908f8e3049b"
            ]
        ]
    },
    {
        "id": "01e7d63912554bfc",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Larissa Archaio_Theatro [8:Point]",
        "func": "//8\tLarissa_Archaio_Theatro [8:Point]\t0\t-1\t0\t0\t22,41459733\t39,64023403\n\n// Retrieve LARISSA sensors\nvar sensors = global.get(\"SENSORS_LARISSA\");\n\n//name \nvar get_name = \"Larissa Archaio_Theatro [8:Point]\";\n\n//location\nvar get_lon = 22.41459733;\nvar get_lat = 39.64023403;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 50 mm\n    get_prev_reading = Math.floor(Math.random() * 51);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    //Flooding event ongoing - values rise\n    // Increase by 10 to 59 mm\n    get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n    if (get_random_water_level > 200) {\n        // Cap at 200 mm\n        get_random_water_level = 200;\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 80) {\n        // Cap at 80%\n        get_humidity = 80;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_LARISSA\nglobal.set(\"SENSORS_LARISSA\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat\n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1220,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "131308f2c504c4c0"
            ]
        ]
    },
    {
        "id": "611582ec5a08520a",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Dasochori [9:Point]",
        "func": "//9\tDasochori [9:Point]\t0\t-1\t0\t0\t22,42596027\t39,69579265\n\n// Retrieve DASOCHORI sensors\nvar sensors = global.get(\"SENSORS_DASOCHORI\");\n\n//name \nvar get_name = \"Dasochori [9:Point]\";\n\n//location\nvar get_lon = 22.42596027;\nvar get_lat = 39.69579265;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 251);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    //Flooding event ongoing - values rise\n    // Increase by 10 to 59 mm\n    get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n    if (get_random_water_level > 2500) {\n        // Cap at 2500 mm\n        get_random_water_level = 2500;\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 100) {\n        // Cap at 100%\n        get_humidity = 100;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999) {\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_DASOCHORI\nglobal.set(\"SENSORS_DASOCHORI\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat\n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1260,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "f5353b8e7fc7af5b"
            ]
        ]
    },
    {
        "id": "71e81316bd31311d",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Omorfochori [10:Point]",
        "func": "//10\tOmorfochori [10:Point]\t0\t-1\t0\t0\t22,45448514\t39,67390712\n\n// Retrieve DASOCHORI sensors\nvar sensors = global.get(\"SENSORS_OMORFOCHORI\");\n\n//name \nvar get_name = \"Omorfochori [10:Point]\";\n\n//location\nvar get_lon = 22.45448514;\nvar get_lat = 39.67390712;\n\n//use to read previous values\nvar get_prev_reading = null;\nvar get_prev_humidity = null;\nvar get_prev_temperature = null;\n\n//FLOOD DEPTH\nvar get_random_water_level = 0;\n\n// Loop through the array to find the sensor and get its values\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        get_prev_reading = sensorData[\"Flood Depth\"];\n        get_prev_humidity = sensorData[\"Humidity\"];\n        get_prev_temperature = sensorData[\"Temperature\"];\n    }\n});\n\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_reading == -1){\n    // Random initial water level between 0 and 250 mm\n    get_prev_reading = Math.floor(Math.random() * 51);\n}\n\nif (flow.get(\"IS_FLOODING\") == 1) {\n    //Flooding event ongoing - values rise\n    // Increase by 10 to 59 mm\n    get_random_water_level = get_prev_reading + Math.floor(Math.random() * 50) + 10;\n\n    if (get_random_water_level > 240) {\n        // Cap at 240 mm\n        get_random_water_level = 240;\n    }\n} else {\n    //Flooding event stopped - values will fall\n    // Decrease by 0 to 19 mm\n    get_random_water_level = get_prev_reading - Math.floor(Math.random() * 20);\n\n    if (get_random_water_level < 0) {\n        // Ensure it doesn't go below 0\n        get_random_water_level = 0;\n    }\n}\n\n\n//HUMIDITY\n//if previous reading = -1, then it is the initialization phase\nif (get_prev_humidity == -1){\n    // Random initial humidity between 40% and 60%\n    get_prev_humidity = Math.floor(Math.random() * 21) + 40;\n}\nvar get_humidity = 0;\nif (flow.get(\"IS_FLOODING\") == 1){\n    // Gradually increase humidity during flooding\n    // Increase by 1 to 3%\n    get_humidity = get_prev_humidity + Math.floor(Math.random() * 3) + 1;\n    if (get_humidity > 90) {\n        // Cap at 90%\n        get_humidity = 90;\n    }\n} else {\n    // Gradually decrease humidity when not flooding\n    // Decrease by 1 to 3%\n    get_humidity = get_prev_humidity - (Math.floor(Math.random() * 3) + 1);\n    if (get_humidity < 40) {\n        // Ensure it doesn't go below 40%\n        get_humidity = 40;\n    }\n}\n\n\n//TEMPERATURE\n//if previous reading = 999, then it is the initialization phase\nif (get_prev_temperature == 999){\n    // Random initial temperature between 28°C and 30°C\n    get_prev_temperature = Math.floor(Math.random() * 2) + 28;\n}\n\n// Change by -1, 0, or +1 °C\nvar get_temperature = get_prev_temperature + Math.floor(Math.random() * 3) - 1;\nif (get_temperature < 25) { get_temperature = 25; }\nif (get_temperature > 32) { get_temperature = 32; }\n\n//STORE VALUES TO FLOW VARIABLE\nsensors.forEach(function(sensorData) {\n    if (sensorData.sensor === get_name) {\n        sensorData[\"Flood Depth\"] = get_random_water_level;\n        sensorData[\"Humidity\"] = get_humidity;\n        sensorData[\"Temperature\"] = get_temperature;\n    }\n});\n    \n// Store the updated sensors array back to the global variable SENSORS_DASOCHORI\nglobal.set(\"SENSORS_OMORFOCHORI\", sensors);\n\n\n//FINAL PAYLOAD\nmsg.payload = [\n    [{\n        flood_depth: get_random_water_level,\n        humidity: get_humidity,\n        temperature: get_temperature\n    },\n    {\n        name: get_name,\n        lon: get_lon,\n        lat: get_lat\n    }]\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1300,
        "wires": [
            [
                "d5e3c55c6457960f",
                "01f0ba061acfd4b2",
                "0f4478c6cfd67eb7",
                "764ef4cbbd79f7c9"
            ]
        ]
    },
    {
        "id": "78f027ed72710f55",
        "type": "comment",
        "z": "6479d747245de353",
        "name": "Sensor payload data explained",
        "info": "\n# VALUES (measurements from sensor):\nflood_depth: water level (depth) in millimeters. \nValues will be from 0mm (min) to 3000mm (max) \nwhich is the installation height of the water depth sensor\nhumidity: ranges from 0 - 100 (%)\ntemperature:ranges from -10°C - 45°C\n\n# TAGS (static values from sensor)\nname: unique identifier that describes the installed location (in text)\nlon: sensor's installation location longitude value\nlat: sensor's installation location latitude value\n\n# THRESHOLD\nthreshold value for AllERT activation is set to 250 mm\n",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "f28879e2c2b6e8d3",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "Show Sensors & Add AllERT ESRI Layers",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 300,
        "y": 2980,
        "wires": [
            [
                "b9f16ccd542ee6d7",
                "70094633a1b97b7d",
                "a80db844ba8a9582",
                "a019ec57acc55a31",
                "e9f255c2cb8a5228",
                "b4a86bd8f95db2c7"
            ]
        ]
    },
    {
        "id": "3a87892a00c18441",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "Get Sensors Measurements",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "5073766b00312646"
            ]
        ]
    },
    {
        "id": "d5e3c55c6457960f",
        "type": "debug",
        "z": "6479d747245de353",
        "name": "Sensor Values that will be sent to MQTT Broker",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0][0].flood_depth",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 860,
        "wires": []
    },
    {
        "id": "63a4ead0a5e19422",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "Force AllERT (once)",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "0c095526b6b61137",
                "5f2dfb11c250fc4f"
            ]
        ]
    },
    {
        "id": "5f2dfb11c250fc4f",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Check AllERT Status",
        "func": "\nif (global.get(\"AllERT\") == 1){\n    msg.topic = \"AllERT\"\n} else {\n    msg.topic = \"No AllERT\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 940,
        "wires": [
            [
                "d77289ad38200bb9",
                "9bb9dd07b5052e55",
                "cd83eefab2508d24",
                "f49718991c559bf7",
                "b84d4436d4f860dc",
                "6415b7fb26b11a20",
                "26a22c54423b64e1",
                "01e7d63912554bfc",
                "611582ec5a08520a",
                "71e81316bd31311d"
            ]
        ]
    },
    {
        "id": "0c095526b6b61137",
        "type": "change",
        "z": "6479d747245de353",
        "name": "Set flow.FORCE_AllERT = 1",
        "rules": [
            {
                "t": "set",
                "p": "FORCE_AllERT",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 620,
        "wires": [
            [
                "9babeb590cb76c84"
            ]
        ]
    },
    {
        "id": "dc23bddb66e42b7f",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "Stop Flooding Event",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 480,
        "wires": [
            [
                "87bada8310915627"
            ]
        ]
    },
    {
        "id": "87bada8310915627",
        "type": "change",
        "z": "6479d747245de353",
        "name": "Set flow.IS_FLOODING = 0",
        "rules": [
            {
                "t": "set",
                "p": "IS_FLOODING",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 480,
        "wires": [
            [
                "9babeb590cb76c84"
            ]
        ]
    },
    {
        "id": "4a3c8ea7b1f590b9",
        "type": "debug",
        "z": "6479d747245de353",
        "name": "AllERT Status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 380,
        "wires": []
    },
    {
        "id": "5ac5a04cb037470d",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "View AllERT Status",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 380,
        "wires": [
            [
                "4b2a3232e332a455"
            ]
        ]
    },
    {
        "id": "01f0ba061acfd4b2",
        "type": "mqtt out",
        "z": "6479d747245de353",
        "name": "Lora to MQTT broker",
        "topic": "demie_red/allert_sensors/lora",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d723a14bdb72b742",
        "x": 980,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c9738de8577334a3",
        "type": "mqtt in",
        "z": "6479d747245de353",
        "name": "Subscribe to MQTT broker",
        "topic": "demie_red/allert_sensors/lora",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "d723a14bdb72b742",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1640,
        "wires": [
            [
                "bac7ad917e8acf24",
                "358958c2b78671a1",
                "0f148bfac4c541b2",
                "a322dcb704aa3ed0",
                "fce0b91fb8012036",
                "a30f2572ef019ace",
                "8d79e807e02fc24d",
                "b44771ea590562a9",
                "3ade35a873ac8f34",
                "80ea38e1ee99fd27",
                "7c38bc056a84d144",
                "8caaee80.33352"
            ]
        ]
    },
    {
        "id": "bac7ad917e8acf24",
        "type": "debug",
        "z": "6479d747245de353",
        "name": "Data Received from MQTT Broker",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1640,
        "wires": []
    },
    {
        "id": "358958c2b78671a1",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Falani North [1:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Falani North [1:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n   return null; \n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1760,
        "wires": [
            [
                "3a52c4317f29290a",
                "0b515b02798efbaf"
            ],
            [
                "534c3258400886a8"
            ],
            [
                "3381ae1682dbfa84"
            ]
        ]
    },
    {
        "id": "0f148bfac4c541b2",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Falani Pinios [2:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Falani Pinios [2:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}\n\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1860,
        "wires": [
            [
                "767a99d98071248a",
                "0b515b02798efbaf"
            ],
            [
                "af25eb26f90c62d3"
            ],
            [
                "730e9e17f0b404ac"
            ]
        ]
    },
    {
        "id": "a322dcb704aa3ed0",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Falani East [3:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Falani East [3:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1980,
        "wires": [
            [
                "6f9eff494d35fe82",
                "0b515b02798efbaf"
            ],
            [
                "ec48cc5b165a4e1c"
            ],
            [
                "0ab24aecc389616a"
            ]
        ]
    },
    {
        "id": "fce0b91fb8012036",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Falan South [4:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Falani South [4:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2080,
        "wires": [
            [
                "b887ec8cd187b5a8",
                "0b515b02798efbaf"
            ],
            [
                "0157b39b78e6eef1"
            ],
            [
                "61398800f2dbc9e0"
            ]
        ]
    },
    {
        "id": "a30f2572ef019ace",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Falani Center [5:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Falani Center [5:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2180,
        "wires": [
            [
                "ce2d803579ad5bc6",
                "0b515b02798efbaf"
            ],
            [
                "b45505910cd75efa"
            ],
            [
                "7b6a5769f5edc557"
            ]
        ]
    },
    {
        "id": "8d79e807e02fc24d",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Larissa DEYAL [6:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Larissa DEYAL [6:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2280,
        "wires": [
            [
                "2080e0f5e81ced0d",
                "0b515b02798efbaf"
            ],
            [
                "8e69697313f1bd38"
            ],
            [
                "477cd06ca965f0fd"
            ]
        ]
    },
    {
        "id": "b44771ea590562a9",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Larissa KTEL [7:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Larissa KTEL [7:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2380,
        "wires": [
            [
                "78a489dad2cb68b7",
                "0b515b02798efbaf"
            ],
            [
                "6dcc57cecd573669"
            ],
            [
                "7f403fea47e17593"
            ]
        ]
    },
    {
        "id": "3ade35a873ac8f34",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Larissa Archaio_Theatro [8:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Larissa Archaio_Theatro [8:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2480,
        "wires": [
            [
                "3cc9afddfdaac317",
                "0b515b02798efbaf"
            ],
            [
                "42573a051d242c6d"
            ],
            [
                "6e79816bde57adca"
            ]
        ]
    },
    {
        "id": "80ea38e1ee99fd27",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Dasochori [9:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Dasochori [9:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2580,
        "wires": [
            [
                "23527d65d51c3340",
                "0b515b02798efbaf"
            ],
            [
                "804810fee29fab95"
            ],
            [
                "7ba85c478414e355"
            ]
        ]
    },
    {
        "id": "7c38bc056a84d144",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Process Data (Omorfochori [10:Point])",
        "func": "//get sensor name -> will go to msg.topic\nvar sensor_name = msg.payload[0][1].name;\n\n//get sensor data\nvar msg_flood_depth = { payload: msg.payload[0][0].flood_depth, topic: sensor_name };\nvar msg_humidity = { payload: msg.payload[0][0].humidity, topic: sensor_name };\nvar msg_temperature = { payload: msg.payload[0][0].temperature, topic: sensor_name }; \n\nif (sensor_name == \"Omorfochori [10:Point]\"){\n    return [msg_flood_depth, msg_humidity, msg_temperature];\n} else {\n    return null;\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2680,
        "wires": [
            [
                "0ddbb9538b9e6782",
                "0b515b02798efbaf"
            ],
            [
                "765b4d307e37d7fc"
            ],
            [
                "15c53ce780072a4c"
            ]
        ]
    },
    {
        "id": "b9f16ccd542ee6d7",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Send Sensor Locations",
        "func": "var icon = msg.water_sensor_icon;\nvar layer_name = \"AllERT Sensors (NodeRED)\";\n\nmsg.payload=\n[\n    {\n        \"OBJECTID\": 1,\n        \"name\": \"Falani North [1:Point]\",\n        \"lon\": 22.40991275,\n        \"lat\": 39.73259648,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 2,\n        \"name\": \"Falani Pinios [2:Point]\",\n        \"lon\": 22.41551653,\n        \"lat\": 39.72582177,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 3,\n        \"name\": \"Falani East [3:Point]\",\n        \"lon\": 22.40978966,\n        \"lat\": 39.71552728,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 4,\n        \"name\": \"Falani South [4:Point]\",\n        \"lon\": 22.41327977,\n        \"lat\": 39.70643052,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 5,\n        \"name\": \"Falani Center [5:Point]\",\n        \"lon\": 22.39711284,\n        \"lat\": 39.7220062,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 6,\n        \"name\": \"Larissa DEYAL [6:Point]\",\n        \"lon\": 22.40034696,\n        \"lat\": 39.63668437,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 7,\n        \"name\": \"Larissa KTEL [7:Point]\",\n        \"lon\": 22.41181098,\n        \"lat\": 39.65160047,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 8,\n        \"name\": \"Larissa Archaio_Theatro [8:Point]\",\n        \"lon\": 22.41459733,\n        \"lat\": 39.64023403,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 9,\n        \"name\": \"Dasochori [9:Point]\",\n        \"lon\": 22.42596027,\n        \"lat\": 39.69579265,\n        \"icon\": icon,\n        \"layer\": layer_name\n    },\n    {\n        \"OBJECTID\": 10,\n        \"name\": \"Omorfochori [10:Point]\",\n        \"lon\": 22.45448514,\n        \"lat\": 39.67390712,\n        \"icon\": icon,\n        \"layer\": layer_name\n    }    \n]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2960,
        "wires": [
            [
                "f9fa31c475addaf4"
            ]
        ]
    },
    {
        "id": "0f4478c6cfd67eb7",
        "type": "function",
        "z": "6479d747245de353",
        "name": "check for AllERT initiation",
        "func": "var get_curr_counter = flow.get(\"OVER_THRESHOLD\");\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    flow.set(\"OVER_THRESHOLD\", get_curr_counter + 1);\n}\n\nif (flow.get(\"OVER_THRESHOLD\") >= 3){\n    //reset force AllERT if it was enabled\n    if (flow.get(\"FORCE_AllERT\") == 1){\n        flow.set(\"FORCE_AllERT\", 0);\n    }\n    \n    msg.payload[0][1].status = 1;\n    \n    if (global.get(\"RESPONDERS_NOTIFIED\") == 0) {\n\n        var notification_msg = {payload: \"Urgent! Immediate Action Required for ongoing Flood Response Coordination. Login to the AllERT DSS for information regarding the necessary actions.\"};\n        global.set(\"RESPONDERS_NOTIFIED\", 1);\n        return [msg, notification_msg, msg];\n\n    } else {\n\n        return [msg, null, msg];\n    }\n    \n} else {\n    msg.payload[0][1].status = 0;  \n    return [msg, null, null];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1400,
        "wires": [
            [
                "ccf5ef9d9ea173e4"
            ],
            [
                "c86cb74a60640fa0",
                "a5c6b8ac593d862a"
            ],
            [
                "ad33f76b5732bd91"
            ]
        ]
    },
    {
        "id": "5073766b00312646",
        "type": "change",
        "z": "6479d747245de353",
        "name": "reset Over_Threshold counter",
        "rules": [
            {
                "t": "set",
                "p": "OVER_THRESHOLD",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 460,
        "wires": [
            [
                "5f2dfb11c250fc4f",
                "c79aade0344484d3"
            ]
        ]
    },
    {
        "id": "ccf5ef9d9ea173e4",
        "type": "change",
        "z": "6479d747245de353",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AllERT",
                "pt": "global",
                "to": "payload[0][1].status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "64b4884186a5476f",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "Ini variables",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Initializing System - Flooding Event Commences (Inject)",
        "payloadType": "str",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "5a6e3f4fcc3f1de4"
            ]
        ]
    },
    {
        "id": "5a6e3f4fcc3f1de4",
        "type": "change",
        "z": "6479d747245de353",
        "name": "Ini Variables (Flooding event will commence)",
        "rules": [
            {
                "t": "set",
                "p": "AllERT",
                "pt": "global",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "IS_FLOODING",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "FLOOD_SEVERITY_FALANI",
                "pt": "global",
                "to": "{\"location\":\"Falani\",\"severity\":0}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "FLOOD_SEVERITY_LARISSA",
                "pt": "global",
                "to": "{\"location\":\"Larissa\",\"severity\":0}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "FLOOD_SEVERITY_DASOCHORI",
                "pt": "global",
                "to": "{\"location\":\"Dasochori\",\"severity\":0}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "FLOOD_SEVERITY_OMORFOCHORI",
                "pt": "global",
                "to": "{\"location\":\"Omorfochori\",\"severity\":0}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "THRESHOLD",
                "pt": "global",
                "to": "250",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "THRESHOLD_MODERATE",
                "pt": "global",
                "to": "501",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "THRESHOLD_SEVERE",
                "pt": "global",
                "to": "1001",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "THRESHOLD_CATASTROPHIC",
                "pt": "global",
                "to": "2001",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "FORCE_AllERT",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "RESPONDERS_NOTIFIED",
                "pt": "global",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "SENSORS_FALANI",
                "pt": "global",
                "to": "[{\"sensor\":\"Falani North [1:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1},{\"sensor\":\"Falani Pinios [2:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1},{\"sensor\":\"Falani East [3:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1},{\"sensor\":\"Falani South [4:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1},{\"sensor\":\"Falani Center [5:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1}]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "SENSORS_LARISSA",
                "pt": "global",
                "to": "[{\"sensor\":\"Larissa DEYAL [6:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1},{\"sensor\":\"Larissa KTEL [7:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1},{\"sensor\":\"Larissa Archaio Theatro [8:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1}]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "SENSORS_DASOCHORI",
                "pt": "global",
                "to": "[{\"sensor\":\"Dasochori [9:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1}]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "SENSORS_OMORFOCHORI",
                "pt": "global",
                "to": "[{\"sensor\":\"Omorfochori [10:Point]\",\"Flood Depth\":-1,\"Temperature\":999,\"Humidity\":-1}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 180,
        "wires": [
            [
                "c79aade0344484d3",
                "5073766b00312646"
            ]
        ]
    },
    {
        "id": "a80db844ba8a9582",
        "type": "function",
        "z": "6479d747245de353",
        "name": "1: Add Flooded polygons layer",
        "func": "var m = {overlay:\"Flooded polygons\", \"esri\": \"https://services3.arcgis.com/dNdWqmajbLxVlc02/ArcGIS/rest/services/AllERT_Map_WFL1/FeatureServer/1\", fit:true};\nmsg.payload = {command:{map:m, lat:39.640234, lon:22.414597}};\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3040,
        "wires": [
            [
                "f9fa31c475addaf4"
            ]
        ]
    },
    {
        "id": "a019ec57acc55a31",
        "type": "function",
        "z": "6479d747245de353",
        "name": "2: Add Hotosm grc roads lines Clip Layer",
        "func": "var m = {overlay:\"Hotosm grc roads lines Clip\", \"esri\": \"https://services3.arcgis.com/dNdWqmajbLxVlc02/ArcGIS/rest/services/AllERT_Map_WFL1/FeatureServer/2\", fit:true};\nmsg.payload = {command:{map:m, lat:39.640234, lon:22.414597}};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 3080,
        "wires": [
            [
                "f9fa31c475addaf4"
            ]
        ]
    },
    {
        "id": "e9f255c2cb8a5228",
        "type": "function",
        "z": "6479d747245de353",
        "name": "3: Add Flooded polylines Layer",
        "func": "var m = {overlay:\"Flooded polylines\", \"esri\": \"https://services3.arcgis.com/dNdWqmajbLxVlc02/ArcGIS/rest/services/AllERT_Map_WFL1/FeatureServer/3\", fit:true};\nmsg.payload = {command:{map:m, lat:39.640234, lon:22.414597}};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3120,
        "wires": [
            [
                "f9fa31c475addaf4"
            ]
        ]
    },
    {
        "id": "b4a86bd8f95db2c7",
        "type": "function",
        "z": "6479d747245de353",
        "name": "4: Add Dimoi Thessaly Layer",
        "func": "var m = {overlay:\"Dimoi Thessaly\", \"esri\": \"https://services3.arcgis.com/dNdWqmajbLxVlc02/ArcGIS/rest/services/AllERT_Map_WFL1/FeatureServer/4\", fit:true};\nmsg.payload = {command:{map:m, lat:39.640234, lon:22.414597}};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 3160,
        "wires": [
            [
                "f9fa31c475addaf4"
            ]
        ]
    },
    {
        "id": "70094633a1b97b7d",
        "type": "function",
        "z": "6479d747245de353",
        "name": "0: Add AllERT_Sensors Layer",
        "func": "var m = {overlay:\"AllERT Sensors (ESRI)\", \"esri\": \"https://services3.arcgis.com/dNdWqmajbLxVlc02/ArcGIS/rest/services/AllERT_Map_WFL1/FeatureServer/0\", fit:true};\nmsg.payload = {command:{map:m, lat:39.640234, lon:22.414597}};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3000,
        "wires": [
            [
                "f9fa31c475addaf4"
            ]
        ]
    },
    {
        "id": "4b2a3232e332a455",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Fix Payload for Display",
        "func": "var makeText = \"\";\n\nif (global.get(\"AllERT\") == 1){\n    makeText = \"AllERT is ACTIVE!\";\n} else {\n    makeText = \"AllERT is Inactive.\";\n}\n\nmakeText = makeText + \n    \"\\nSensors over Threshold:\" + \n    flow.get(\"OVER_THRESHOLD\").toString();\n\nmakeText = makeText +\n    \"\\n Flood Severities:\" +\n    \"\\n FALANI: \" + global.get(\"FLOOD_SEVERITY_FALANI\").severity + \n    \"\\n LARISSA: \" + global.get(\"FLOOD_SEVERITY_LARISSA\").severity + \n    \"\\n DASOCHORI: \" + global.get(\"FLOOD_SEVERITY_DASOCHORI\").severity + \n    \"\\n OMORFOCHORI: \" + global.get(\"FLOOD_SEVERITY_OMORFOCHORI\").severity;\n\nmsg.payload = makeText;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "4a3c8ea7b1f590b9",
                "9babeb590cb76c84"
            ]
        ]
    },
    {
        "id": "c809fedf5f238015",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_FALANI\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }        \n    }\n    \n}\n\nmsg.payload = threshold_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 940,
        "wires": [
            [
                "90de81d567e50861"
            ]
        ]
    },
    {
        "id": "ad92895236dd4b63",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_FALANI\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n}\nmsg.payload = threshold_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 980,
        "wires": [
            [
                "95362bdb3f48fca7"
            ]
        ]
    },
    {
        "id": "25b45ea1420d84da",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_FALANI\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\nmsg.payload = threshold_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1020,
        "wires": [
            [
                "aa44529fc2ad5a1e"
            ]
        ]
    },
    {
        "id": "6162f1a556459c84",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_FALANI\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\nmsg.payload = threshold_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1060,
        "wires": [
            [
                "c0ef68ea1f1b3422"
            ]
        ]
    },
    {
        "id": "1d864be5054b59f5",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_FALANI\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\nmsg.payload = threshold_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1100,
        "wires": [
            [
                "1ec61319b4f6670a"
            ]
        ]
    },
    {
        "id": "58ced30270dd7791",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_LARISSA\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\n\nmsg.payload = threshold_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1140,
        "wires": [
            [
                "561a7447b699711c"
            ]
        ]
    },
    {
        "id": "14e31908f8e3049b",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_LARISSA\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\nmsg.payload = threshold_status;\n//msg.enable = enable_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1180,
        "wires": [
            [
                "c5d6235ca631b14c"
            ]
        ]
    },
    {
        "id": "131308f2c504c4c0",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_LARISSA\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\nmsg.payload = threshold_status;\n//msg.enable = enable_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1220,
        "wires": [
            [
                "f3e64390b88bf39f"
            ]
        ]
    },
    {
        "id": "f5353b8e7fc7af5b",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_DASOCHORI\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\nmsg.payload = threshold_status;\n//msg.enable = enable_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1260,
        "wires": [
            [
                "97d0b5bb453ed13f"
            ]
        ]
    },
    {
        "id": "764ef4cbbd79f7c9",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Show Threshold Status",
        "func": "var threshold_status = \"\";\n//var enable_status = false;\n\nif ((msg.payload[0][0].flood_depth) > global.get(\"THRESHOLD\")) {\n    threshold_status = \"Threshold Exceeded!!!\" + \" (current reading: \" \n        + msg.payload[0][0].flood_depth + \"mm)\";\n\n    if (global.get(\"AllERT\") == 1){\n        switch(global.get(\"FLOOD_SEVERITY_OMORFOCHORI\").severity) {\n            case 0:\n                threshold_status += \"\" // - No Flood :)\n                break;\n            case 1:\n                threshold_status += \" - Minor Flood\"\n                break;\n            case 2:\n                threshold_status += \" - Moderate Flood..\"\n                break;\n            case 3:\n                threshold_status += \" - SEVERE Flood !!!\"\n                break;\n            case 4:\n                threshold_status += \" - CATASTROPHIC FLOOD !!! :(\"\n                break;\n            default:\n                //do nothing - something went wrong\n        }\n    }\n\n}\nmsg.payload = threshold_status;\n//msg.enable = enable_status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1300,
        "wires": [
            [
                "886086d26a54f21f"
            ]
        ]
    },
    {
        "id": "39475bec3d02f642",
        "type": "comment",
        "z": "6479d747245de353",
        "name": "Notes 4 MQTT",
        "info": "//MQTT Hive used\n\n//TLS MQTT URL\nc5725620696d45f8af3960d5c6b87fa5.s2.eu.hivemq.cloud\n\n//Port\n8883\n\n//topic\ndemie_red/allert_sensors/lora",
        "x": 100,
        "y": 1580,
        "wires": []
    },
    {
        "id": "ad33f76b5732bd91",
        "type": "link out",
        "z": "6479d747245de353",
        "name": "Send Payload to DSS Flow",
        "mode": "link",
        "links": [
            "e0edba24d19d9ed4"
        ],
        "x": 1135,
        "y": 1480,
        "wires": []
    },
    {
        "id": "5c986e4de17ee824",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 3400,
        "wires": [
            [
                "d0e42188d9bd5834"
            ]
        ]
    },
    {
        "id": "f373b501b9cee910",
        "type": "function",
        "z": "6479d747245de353",
        "name": "Filter Data based on location",
        "func": "let data = msg.payload;\n\nlet groupedData_Falani = {};\nlet groupedData_Larissa = {};\nlet groupedData_Dasochori = {};\nlet groupedData_Omorfochori = {};\n\nfunction roundToNearestMinute(timestamp) {\n    const minuteInMs = 60 * 1000;\n    return Math.round(timestamp / minuteInMs) * minuteInMs;  // Round to the nearest minute\n}\n\nfunction groupByTime(groupedData, time, value) {\n    if (!groupedData[time]) {\n        groupedData[time] = { sum: 0, count: 0 };\n    }\n    groupedData[time].sum += value;\n    groupedData[time].count += 1;\n}\n\n// Loop through InfluxDB results\ndata.forEach(item => {\n    let time = roundToNearestMinute(new Date(item._time).getTime());  // Round time to nearest minute\n    let value = item._value;  // Flood depth value\n    let name = item.name;  // Tag value for the name\n\n    if (name.startsWith(\"Falani\")) {\n        groupByTime(groupedData_Falani, time, value);\n    } else if (name.startsWith(\"Larissa\")) {\n        groupByTime(groupedData_Larissa, time, value);\n    } else if (name.startsWith(\"Dasochori\")) {\n        groupByTime(groupedData_Dasochori, time, value);\n    } else if (name.startsWith(\"Omorfochori\")) {\n        groupByTime(groupedData_Omorfochori, time, value);\n    }\n});\n\nfunction getLastSunday(year, month) {\n    let lastDay = new Date(year, month + 1, 0);  // Get the last day of the month\n    let dayOfWeek = lastDay.getDay();  // Get the day of the week (0 = Sunday, 6 = Saturday)\n    let lastSunday = lastDay.getDate() - dayOfWeek;  // Calculate the last Sunday\n    return new Date(year, month, lastSunday);\n}\n\nfunction isDaylightSavingInGreece(date) {\n    let year = date.getFullYear();\n\n    // Daylight saving starts on the last Sunday of March and ends on the last Sunday of October\n    let dstStart = getLastSunday(year, 2);  // March is month 2 (0-based)\n    let dstEnd = getLastSunday(year, 9);  // October is month 9 (0-based)\n\n    // Check if the current date is within the DST range\n    return date >= dstStart && date < dstEnd;\n}\n\nfunction formatTimestampToLocal(timestamp) {\n    let date = new Date(timestamp);\n\n    // Apply timezone offset for Greece (UTC+2 or UTC+3 during daylight saving time)\n    let timezoneOffset = isDaylightSavingInGreece(date) ? 3 : 2;  // UTC+3 for daylight saving, UTC+2 otherwise\n    date.setHours(date.getUTCHours() + timezoneOffset);\n\n    let day = date.getDate().toString().padStart(2, '0');\n    let month = (date.getMonth() + 1).toString().padStart(2, '0');  // Months are zero-based\n    let hours = date.getHours().toString().padStart(2, '0');\n    let minutes = date.getMinutes().toString().padStart(2, '0');\n\n    return `${day}/${month} ${hours}:${minutes}`;\n}\n\nfunction calculateAverages(groupedData) {\n    let chartData = [];\n    for (let time in groupedData) {\n        let avgValue = groupedData[time].sum / groupedData[time].count;\n        // Format the time before adding to chart data, convert to local timezone\n        chartData.push({ \"x\": formatTimestampToLocal(parseInt(time)), \"y\": avgValue });\n    }\n    return chartData;\n}\n\n// Calculate the average values for each location\nlet chartData_Falani = calculateAverages(groupedData_Falani);\nlet chartData_Larissa = calculateAverages(groupedData_Larissa);\nlet chartData_Dasochori = calculateAverages(groupedData_Dasochori);\nlet chartData_Omorfochori = calculateAverages(groupedData_Omorfochori);\n\n// Assign the chart data to the corresponding messages\nvar msg_Falani = (chartData_Falani.length === 0) ? null : { \"payload\": chartData_Falani };\nvar msg_Larissa = (chartData_Larissa.length === 0) ? null : { \"payload\": chartData_Larissa };\nvar msg_Dasochori = (chartData_Dasochori.length === 0) ? null : { \"payload\": chartData_Dasochori };\nvar msg_Omorfochori = (chartData_Omorfochori.length === 0) ? null : { \"payload\": chartData_Omorfochori };\n\nreturn [msg_Falani, msg_Larissa, msg_Dasochori, msg_Omorfochori];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 3400,
        "wires": [
            [
                "b44243b55d77936a"
            ],
            [
                "966d85dd1b28fa96"
            ],
            [
                "d59cb572930a7206"
            ],
            [
                "430a240707b7e9db"
            ]
        ]
    },
    {
        "id": "5daafab9bda7d380",
        "type": "catch",
        "z": "6479d747245de353",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 480,
        "y": 60,
        "wires": [
            [
                "e036c844ddb0cdb5"
            ]
        ]
    },
    {
        "id": "60e33a5209047934",
        "type": "ui-button",
        "z": "6479d747245de353",
        "group": "79f6d02b3ab51d7a",
        "name": "btn_get_sen",
        "label": "Get Sensor Values",
        "order": 2,
        "width": "2",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "Requesting Sensor Values...",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "5073766b00312646",
                "c5f74f5b84112e32"
            ]
        ]
    },
    {
        "id": "4dd199c6eac7686e",
        "type": "ui-button",
        "z": "6479d747245de353",
        "group": "79f6d02b3ab51d7a",
        "name": "btn_force_AllERT",
        "label": "Force AllERT",
        "order": 3,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "AllERT forced! Now 3 or more Sensors will report higher than Threshold readings!",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 690,
        "y": 620,
        "wires": [
            [
                "0c095526b6b61137",
                "5f2dfb11c250fc4f"
            ]
        ]
    },
    {
        "id": "b2e0c83a16e0ead0",
        "type": "ui-button",
        "z": "6479d747245de353",
        "group": "79f6d02b3ab51d7a",
        "name": "btn_stop_flooding",
        "label": "Stop Flooding Event",
        "order": 4,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "Flooding Event Stopped! Flood Depth values will now start to decrease in time..",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 690,
        "y": 520,
        "wires": [
            [
                "87bada8310915627"
            ]
        ]
    },
    {
        "id": "13897432af36ee86",
        "type": "ui-button",
        "z": "6479d747245de353",
        "group": "79f6d02b3ab51d7a",
        "name": "btn_view_AllERT_status",
        "label": "View AllERT Status",
        "order": 5,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 710,
        "y": 420,
        "wires": [
            [
                "4b2a3232e332a455"
            ]
        ]
    },
    {
        "id": "b204439b0ecbd298",
        "type": "ui-button",
        "z": "6479d747245de353",
        "group": "79f6d02b3ab51d7a",
        "name": "btn_show_sensors",
        "label": "Show Sensors <br>& Layers on Map",
        "order": 6,
        "width": "2",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "Adding Map Layers and Details",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 370,
        "y": 3020,
        "wires": [
            [
                "2e89430469ce74ac",
                "b4a86bd8f95db2c7",
                "e9f255c2cb8a5228",
                "a019ec57acc55a31",
                "a80db844ba8a9582",
                "70094633a1b97b7d",
                "b9f16ccd542ee6d7"
            ]
        ]
    },
    {
        "id": "a509a1cd8037ff57",
        "type": "ui-button",
        "z": "6479d747245de353",
        "group": "79f6d02b3ab51d7a",
        "name": "btn_ini",
        "label": "Initialize Variables <br>& Start Flood Event",
        "order": 1,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "System Initialized - Flood Event will now Start",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "white",
        "iconColor": "",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "5a6e3f4fcc3f1de4"
            ]
        ]
    },
    {
        "id": "90de81d567e50861",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "3f9e45fa06a76d50",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_1",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 940,
        "wires": []
    },
    {
        "id": "95362bdb3f48fca7",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "01bc00a54922f9da",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_2",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 980,
        "wires": []
    },
    {
        "id": "aa44529fc2ad5a1e",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "141130d1cb73e8da",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_3",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 1020,
        "wires": []
    },
    {
        "id": "c0ef68ea1f1b3422",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "74f525e7b173eb49",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_4",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1ec61319b4f6670a",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "4fea00fbe0a7300d",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_5",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "561a7447b699711c",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "46d475fb89b4c934",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_6",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c5d6235ca631b14c",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "5592492949504a80",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_7",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f3e64390b88bf39f",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "50faa3f91f305570",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_8",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 1220,
        "wires": []
    },
    {
        "id": "97d0b5bb453ed13f",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "87749ecf637e0b7b",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_9",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1250,
        "y": 1260,
        "wires": []
    },
    {
        "id": "886086d26a54f21f",
        "type": "ui-text",
        "z": "6479d747245de353",
        "group": "479a4bb78b4b80f5",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "txt_Sensor_10",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#ff0000",
        "className": "",
        "x": 1260,
        "y": 1300,
        "wires": []
    },
    {
        "id": "9babeb590cb76c84",
        "type": "ui-notification",
        "z": "6479d747245de353",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notification_window",
        "x": 1290,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c86cb74a60640fa0",
        "type": "ui-notification",
        "z": "6479d747245de353",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notification_window",
        "x": 1270,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "c79aade0344484d3",
        "type": "ui-notification",
        "z": "6479d747245de353",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notification_window",
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2e89430469ce74ac",
        "type": "ui-notification",
        "z": "6479d747245de353",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notification_window",
        "x": 650,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "e036c844ddb0cdb5",
        "type": "ui-notification",
        "z": "6479d747245de353",
        "ui": "0b0b3c3c94b9ba13",
        "position": "top left",
        "colorDefault": false,
        "color": "#e60505",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "notification_window",
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "767a99d98071248a",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "2: Flood Depth",
        "group": "01bc00a54922f9da",
        "order": 2,
        "width": "2",
        "height": "3",
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 1820,
        "wires": []
    },
    {
        "id": "6f9eff494d35fe82",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "3: Flood Depth",
        "group": "141130d1cb73e8da",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 1940,
        "wires": []
    },
    {
        "id": "b887ec8cd187b5a8",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "4: Flood Depth",
        "group": "74f525e7b173eb49",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 2040,
        "wires": []
    },
    {
        "id": "ce2d803579ad5bc6",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "5: Flood Depth",
        "group": "4fea00fbe0a7300d",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 2140,
        "wires": []
    },
    {
        "id": "2080e0f5e81ced0d",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "6: Flood Depth",
        "group": "46d475fb89b4c934",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 2240,
        "wires": []
    },
    {
        "id": "78a489dad2cb68b7",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "7: Flood Depth",
        "group": "5592492949504a80",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 2340,
        "wires": []
    },
    {
        "id": "3cc9afddfdaac317",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "8: Flood Depth",
        "group": "50faa3f91f305570",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 2440,
        "wires": []
    },
    {
        "id": "23527d65d51c3340",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "9: Flood Depth",
        "group": "87749ecf637e0b7b",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 2540,
        "wires": []
    },
    {
        "id": "0ddbb9538b9e6782",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "10: Flood Depth",
        "group": "479a4bb78b4b80f5",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 2640,
        "wires": []
    },
    {
        "id": "af25eb26f90c62d3",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "2: Humidity",
        "group": "01bc00a54922f9da",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 910,
        "y": 1860,
        "wires": []
    },
    {
        "id": "ec48cc5b165a4e1c",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "3: Humidity",
        "group": "141130d1cb73e8da",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1090,
        "y": 1980,
        "wires": []
    },
    {
        "id": "0157b39b78e6eef1",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "4: Humidity",
        "group": "74f525e7b173eb49",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 850,
        "y": 2080,
        "wires": []
    },
    {
        "id": "b45505910cd75efa",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "5: Humidity",
        "group": "4fea00fbe0a7300d",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1090,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8e69697313f1bd38",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "6: Humidity",
        "group": "46d475fb89b4c934",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 850,
        "y": 2280,
        "wires": []
    },
    {
        "id": "6dcc57cecd573669",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "7: Humidity",
        "group": "5592492949504a80",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1090,
        "y": 2380,
        "wires": []
    },
    {
        "id": "42573a051d242c6d",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "8: Humidity",
        "group": "50faa3f91f305570",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 910,
        "y": 2480,
        "wires": []
    },
    {
        "id": "804810fee29fab95",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "9: Humidity",
        "group": "87749ecf637e0b7b",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1090,
        "y": 2580,
        "wires": []
    },
    {
        "id": "765b4d307e37d7fc",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "10: Humidity",
        "group": "479a4bb78b4b80f5",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 910,
        "y": 2680,
        "wires": []
    },
    {
        "id": "730e9e17f0b404ac",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "2: Temperature",
        "group": "01bc00a54922f9da",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 1900,
        "wires": []
    },
    {
        "id": "0ab24aecc389616a",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "3: Temperature",
        "group": "141130d1cb73e8da",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 2020,
        "wires": []
    },
    {
        "id": "61398800f2dbc9e0",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "4: Temperature",
        "group": "74f525e7b173eb49",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 2120,
        "wires": []
    },
    {
        "id": "7b6a5769f5edc557",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "5: Temperature",
        "group": "4fea00fbe0a7300d",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 2220,
        "wires": []
    },
    {
        "id": "477cd06ca965f0fd",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "6: Temperature",
        "group": "46d475fb89b4c934",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 2320,
        "wires": []
    },
    {
        "id": "7f403fea47e17593",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "7: Temperature",
        "group": "5592492949504a80",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 2420,
        "wires": []
    },
    {
        "id": "6e79816bde57adca",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "8: Temperature",
        "group": "50faa3f91f305570",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 2520,
        "wires": []
    },
    {
        "id": "7ba85c478414e355",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "9: Temperature",
        "group": "87749ecf637e0b7b",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 2620,
        "wires": []
    },
    {
        "id": "15c53ce780072a4c",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "10: Temperature",
        "group": "479a4bb78b4b80f5",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 2720,
        "wires": []
    },
    {
        "id": "3a52c4317f29290a",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "1: Flood Depth",
        "group": "3f9e45fa06a76d50",
        "order": 2,
        "width": "2",
        "height": 3,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Flood Depth",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "300",
                "color": "#fdb653"
            },
            {
                "from": "501",
                "color": "#d12323"
            }
        ],
        "min": 0,
        "max": "3000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 1700,
        "wires": []
    },
    {
        "id": "534c3258400886a8",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "1: Humidity",
        "group": "3f9e45fa06a76d50",
        "order": 4,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f7f7f7"
            },
            {
                "from": "40",
                "color": "#86d0fe"
            },
            {
                "from": "90",
                "color": "#0000ff"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1090,
        "y": 1740,
        "wires": []
    },
    {
        "id": "3381ae1682dbfa84",
        "type": "ui-gauge",
        "z": "6479d747245de353",
        "name": "1: Temperature",
        "group": "3f9e45fa06a76d50",
        "order": 3,
        "width": "2",
        "height": "3",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "-10",
                "color": "#5cd65c"
            },
            {
                "from": "25",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#ea5353"
            }
        ],
        "min": "-10",
        "max": "45",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1100,
        "y": 1780,
        "wires": []
    },
    {
        "id": "0b515b02798efbaf",
        "type": "ui-chart",
        "z": "6479d747245de353",
        "group": "9873a56393824e9d",
        "name": "Flood_Depth_All_Chart",
        "label": "Flood Depth Chart of All Sensor Real-Time Readings",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "time",
        "xAxisProperty": "",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "flood depth",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "3000",
        "action": "append",
        "stackSeries": false,
        "pointShape": "star",
        "pointRadius": "5",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#ffffff"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#ffffff"
        ],
        "gridColorDefault": true,
        "width": "12",
        "height": "10",
        "className": "",
        "x": 490,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "d59cb572930a7206",
        "type": "ui-chart",
        "z": "6479d747245de353",
        "group": "c6aa179c1d765f60",
        "name": "Historical Data Dasochori",
        "label": "Dasochori",
        "order": 1,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "Time",
        "xAxisProperty": "",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "Water Level (mm)",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "3000",
        "action": "append",
        "stackSeries": false,
        "pointShape": "cross",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": "52",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#46932a",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "x": 1070,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "430a240707b7e9db",
        "type": "ui-chart",
        "z": "6479d747245de353",
        "group": "c6aa179c1d765f60",
        "name": "Historical Data Omorfochori",
        "label": "Omorfochori",
        "order": 2,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "Time",
        "xAxisProperty": "",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "Water Level (mm)",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "3000",
        "action": "append",
        "stackSeries": false,
        "pointShape": "crossRot",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": "52",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#bab040",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "x": 1080,
        "y": 3460,
        "wires": [
            []
        ]
    },
    {
        "id": "8caaee80.33352",
        "type": "influxdb out",
        "z": "6479d747245de353",
        "influxdb": "7cb82e68ba6fcb7a",
        "name": "Insert Sensor Values in InfluxDB",
        "measurement": "AllERT_Sensors",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "test",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "CSIoT",
        "bucket": "DemieRed",
        "x": 510,
        "y": 1700,
        "wires": []
    },
    {
        "id": "d0e42188d9bd5834",
        "type": "influxdb in",
        "z": "6479d747245de353",
        "influxdb": "7cb82e68ba6fcb7a",
        "name": "Use InfluxDB Storage",
        "query": "//used mapping for Falani and Larissa\n//since some points were inserted \n//ex. as Falani_North and some as Falani North\n//in order to include both in the results\n\nfrom(bucket: \"DemieRed\")\n  |> range(start: -30d)  // Retrieves data from the past 8 days.\n  |> filter(fn: (r) => r._measurement == \"AllERT_Sensors\")\n  |> filter(fn: (r) => r._field == \"flood_depth\")  // Filter by the flood_depth field.\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      name: if r.name =~ /^Falani/ then \"Falani\"\n            else if r.name =~ /^Larissa/ then \"Larissa\"\n            else if r.name =~ /^Dasochori/ then \"Dasochori\"\n            else if r.name =~ /^Omorfochori/ then \"Omorfochori\"\n            else r.name  // Leave unchanged if none of the patterns match\n  }))\n  |> aggregateWindow(every: 1h, fn: mean, createEmpty: false)  // Aggregate the data to hourly means.\n  |> keep(columns: [\"_time\", \"_value\", \"name\"])  // Keep only the time, flood_depth (stored in _value), and the tag key.\n  |> sort(columns: [\"_time\"], desc: false)  // Sort by _time in ascending order.\n  |> limit(n: 1000)  // Limit the number of results returned (optional, adjust as needed).\n  |> yield(name: \"result\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "CSIoT",
        "x": 460,
        "y": 3400,
        "wires": [
            [
                "f373b501b9cee910"
            ]
        ]
    },
    {
        "id": "d9b091496b167d09",
        "type": "ui-iframe",
        "z": "6479d747245de353",
        "name": "WorldMap iFrame",
        "group": "4a610f34d3005aa8",
        "order": 1,
        "src": "https://dark-calandra.flowfuse.cloud/AllERT_Sensors/",
        "width": "12",
        "height": "12",
        "x": 1070,
        "y": 2960,
        "wires": []
    },
    {
        "id": "a5c6b8ac593d862a",
        "type": "pushsafer",
        "z": "6479d747245de353",
        "name": "Send notification to all responders",
        "apikey": "639e8e1d089a3e9b",
        "notificationtemplate": "f3e22a3182391f25",
        "x": 1320,
        "y": 1400,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f9fa31c475addaf4",
        "type": "worldmap",
        "z": "6479d747245de353",
        "name": "AllERT Sensors",
        "lat": "39.640234",
        "lon": "22.414597",
        "zoom": "12",
        "layer": "EsriS",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "true",
        "path": "/AllERT_Sensors",
        "overlist": "DR,CO,RA,DN,TL",
        "maplist": "OSMG,OSMC,EsriC,EsriS,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1080,
        "y": 3080,
        "wires": []
    },
    {
        "id": "1d3ed759d3762b2d",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 3280,
        "wires": [
            [
                "6f0e750437987b22"
            ]
        ]
    },
    {
        "id": "6f0e750437987b22",
        "type": "function",
        "z": "6479d747245de353",
        "name": "function 1",
        "func": "var msg_Falani = { \"payload\": [] };\nvar msg_Larissa = { \"payload\": [] };\n\nreturn [msg_Falani,msg_Larissa];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 3280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b44243b55d77936a",
        "type": "ui-chart",
        "z": "6479d747245de353",
        "group": "c6aa179c1d765f60",
        "name": "Historical Data Falani",
        "label": "Falani",
        "order": 3,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "Time",
        "xAxisProperty": "",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "Water Level (mm)",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "3000",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#b92222",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "x": 1060,
        "y": 3340,
        "wires": [
            []
        ]
    },
    {
        "id": "966d85dd1b28fa96",
        "type": "ui-chart",
        "z": "6479d747245de353",
        "group": "c6aa179c1d765f60",
        "name": "Historical Data Larissa",
        "label": "Larissa",
        "order": 4,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "Time",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "Water Level (mm)",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "3000",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "x": 1060,
        "y": 3380,
        "wires": [
            []
        ]
    },
    {
        "id": "49d72fcea2c0fd3e",
        "type": "inject",
        "z": "6479d747245de353",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 870,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c5f74f5b84112e32",
        "type": "delay",
        "z": "6479d747245de353",
        "name": "",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 280,
        "wires": [
            [
                "60e33a5209047934"
            ]
        ]
    }
]
